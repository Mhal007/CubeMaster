{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/michal-pc/Dokumenty/CubeMaster/generateSVGs.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx",["flow",{}],"nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}]],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"generateSVGs.ts","filename":"/home/michal-pc/Dokumenty/CubeMaster/generateSVGs.ts","inputSourceMap":{"version":3,"file":"generateSVGs.ts","sourceRoot":"","sources":["generateSVGs.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\nimport { algorithm, line, OLLs, PLLs, point } from './server/const';\n\ntype strikeFormatted = {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  fill: string;\n};\n\ntype squareFormatted = strikeFormatted & {\n  stroke: string;\n  strokeWidth: number;\n};\n\ntype marker = {\n  points: point[];\n  angle: number;\n};\n\nconst filesPath: string = 'public/images/';\n\nconst getSVGcontent = (\n  { squares, strikes, lines = [] }: algorithm,\n  squareLength: number,\n  spacingLength: number = squareLength / 10\n): string => {\n  const cubeSize = squares[0].length;\n\n  console.log('lines', lines);\n\n  const colorPrimary = '#ffff45';\n  const colorSecondary = 'gray';\n  const colorBackground = 'black';\n\n  const squaresFormatted: squareFormatted[][] = squares.map(\n    (row: number[], rowIndex: number) =>\n      row.map((face, columnIndex) => ({\n        x: spacingLength * 2 + columnIndex * (squareLength + spacingLength),\n        y: spacingLength * 2 + rowIndex * (squareLength + spacingLength),\n        width: squareLength,\n        height: squareLength,\n        fill: face ? colorPrimary : colorSecondary,\n        stroke: colorBackground,\n        strokeWidth: spacingLength\n      }))\n  );\n\n  const getStrikePosition = (index: number): number => {\n    if (index === 0) {\n      return 0.5 * spacingLength;\n    }\n\n    if (index - 1 === cubeSize) {\n      return 1.5 * spacingLength + (index - 1) * (spacingLength + squareLength);\n    }\n\n    return spacingLength * 2 + (index - 1) * (spacingLength + squareLength);\n  };\n\n  const strikesTop: strikeFormatted[] = strikes[0]\n    ? strikes[0].map((strike: number, strikeIndex: number) => ({\n        x: getStrikePosition(strikeIndex + 1),\n        y: getStrikePosition(0),\n        width: squareLength,\n        height: spacingLength,\n        fill: strike ? colorPrimary : ''\n      }))\n    : [];\n\n  const strikesRight: strikeFormatted[] = strikes[1]\n    ? strikes[1].map((strike: number, strikeIndex: number) => ({\n        x: getStrikePosition(cubeSize + 1),\n        y: getStrikePosition(strikeIndex + 1),\n        width: spacingLength,\n        height: squareLength,\n        fill: strike ? colorPrimary : ''\n      }))\n    : [];\n\n  const strikesBottom: strikeFormatted[] = strikes[2]\n    ? strikes[2].map((strike: number, strikeIndex: number) => ({\n        x: getStrikePosition(strikeIndex + 1),\n        y: getStrikePosition(cubeSize + 1),\n        width: squareLength,\n        height: spacingLength,\n        fill: strike ? colorPrimary : ''\n      }))\n    : [];\n\n  const strikesLeft: strikeFormatted[] = strikes[3]\n    ? strikes[3].map((strike: number, strikeIndex: number) => ({\n        x: getStrikePosition(0),\n        y: getStrikePosition(strikeIndex + 1),\n        width: spacingLength,\n        height: squareLength,\n        fill: strike ? colorPrimary : ''\n      }))\n    : [];\n\n  const strikesFormatted: strikeFormatted[][] = [\n    strikesTop,\n    strikesRight,\n    strikesBottom,\n    strikesLeft\n  ];\n\n  const getCenter = ({ x: squareX, y: squareY }: point) => {\n    const x =\n      2 * spacingLength +\n      0.5 * squareLength +\n      (spacingLength + squareLength) * squareX;\n    const y =\n      2 * spacingLength +\n      0.5 * squareLength +\n      (spacingLength + squareLength) * squareY;\n\n    return { x, y };\n  };\n\n  const getPoints = (line: line): line => line.map(point => getCenter(point));\n\n  const lineToMarker = (pointA: point, pointB: point) => {\n    const pointC = {\n      x: pointA.x + Math.abs(pointB.x - pointA.x),\n      y: pointA.y\n    };\n\n    const rotationAngle =\n      (Math.atan2(pointB.y - pointA.y, pointB.x - pointA.x) * 180) / Math.PI -\n      Math.atan2(pointC.y - pointA.y, pointC.x - pointA.x);\n\n    const leftBackPoint = {\n      x: pointB.x - 0.25 * squareLength,\n      y: pointB.y - 0.25 * squareLength\n    };\n\n    const rightBackPoint = {\n      x: pointB.x - 0.25 * squareLength,\n      y: pointB.y + 0.25 * squareLength\n    };\n\n    console.log('pointA', pointA);\n    console.log('pointB', pointB);\n    console.log('leftBackPoint', leftBackPoint);\n    console.log('rightBackPoint', rightBackPoint);\n\n    return {\n      points: [leftBackPoint, pointB, rightBackPoint],\n      angle: rotationAngle\n    };\n  };\n\n  const getMarkers = (line: line): marker[] => {\n    const markers = [];\n\n    for (let i = 0; i < line.length; i++) {\n      if (i > 0) {\n        markers.push(lineToMarker(line[i - 1], line[i]));\n      }\n    }\n\n    markers.push(lineToMarker(line[line.length - 1], line[0]));\n\n    return markers;\n  };\n\n  const linesFormatted: line[] = lines.map(line => getPoints(line));\n\n  const boardSize: number =\n    spacingLength * 3 + cubeSize * (squareLength + spacingLength);\n\n  const content: string = `\n    <svg \n      xmlns=\"http://www.w3.org/2000/svg\" \n      width=\"${boardSize}\"\n      height=\"${boardSize}\"\n    >\n      <!-- BACKGROUND -->\n      <rect \n        width=\"${boardSize}\"\n        height=\"${boardSize}\"\n        fill=\"${colorBackground}\"  \n      />\n      \n      <!-- SQUARES -->\n      ${squaresFormatted\n        .map(row =>\n          row\n            .map(\n              square => `\n                <rect \n                  x=\"${square.x}\" \n                  y=\"${square.y}\" \n                  width=\"${square.width}\"\n                  height=\"${square.height}\"\n                  fill=\"${square.fill}\"\n                />\n              `\n            )\n            .join('')\n        )\n        .join('')}\n      \n          \n      <!-- STRIKES -->\n      ${strikesFormatted\n        .map(strikeGroup =>\n          strikeGroup\n            .filter(strike => strike.fill)\n            .map(\n              strike => `\n                <rect \n                  x=\"${strike.x}\" \n                  y=\"${strike.y}\" \n                  width=\"${strike.width}\"\n                  height=\"${strike.height}\"\n                  fill=\"${strike.fill}\"\n                />\n              `\n            )\n            .join('')\n        )\n        .join('')}\n      \n      <!-- LINES -->\n      ${linesFormatted.map(\n        line => `\n          <polyline \n          points=\"${line.reduce(\n            (points, point) => `${points} ${point.x},${point.y}`,\n            ''\n          ) + ` ${line[0].x},${line[0].y}`}\" \n          fill=\"none\" \n          stroke=\"orange\" \n          stroke-width=\"3\"\n          />\n        `\n      )}\n      \n      <!-- MARKERS -->\n      ${linesFormatted\n        .map((line: line) =>\n          getMarkers(line)\n            .map(\n              ({ points, angle }: { points: point[]; angle: number }) => `\n                <polygon \n                  points=\"${points.reduce(\n                    (points: string, point: point) =>\n                      `${points} ${point.x},${point.y}`,\n                    ''\n                  )}\"\n                  fill=\"red\" \n                  transform=\"\n                  translate(${points[1].x} ${points[1].y}) \n                  rotate(${angle} 0 0) \n                  translate(${-1 * points[1].x} ${-1 * points[1].y})\"\n                />\n              `\n            )\n            .join('')\n        )\n        .join('')}\n    </svg>\n  `;\n\n  return content;\n};\n\nconst writeFile = (\n  path: string,\n  name: string,\n  extension: string,\n  content: string\n) => {\n  return new Promise(resolve => {\n    fs.writeFile(`${path}${name}${extension}`, content, err => {\n      if (err) {\n        throw err;\n      }\n\n      resolve(`File ${name} created successfully`);\n    });\n  });\n};\n\n/* write files */\nOLLs.filter((OLL: algorithm) => OLL.squares).forEach(\n  async (scramble: algorithm) => {\n    const content = getSVGcontent(scramble, 25, 3);\n    const result = await writeFile(filesPath, scramble.name, '.svg', content);\n    console.info(result);\n  }\n);\n\nPLLs.filter((PLL: algorithm) => PLL.lines && PLL.lines.length).forEach(\n  async (scramble: algorithm) => {\n    const content = getSVGcontent(scramble, 25, 3);\n    const result = await writeFile(filesPath, scramble.name, '.svg', content);\n    console.info(result);\n  }\n);\n"]},"passPerPreset":false,"envName":"development","cwd":"/home/michal-pc/Dokumenty/CubeMaster","root":"/home/michal-pc/Dokumenty/CubeMaster","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.7.1","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"TSModuleBlock":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/michal-pc/Dokumenty/CubeMaster/generateSVGs.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"generateSVGs.ts"}},"code":"var _regeneratorRuntime;\n\nmodule.link(\"@babel/runtime/regenerator\", {\n  default: function (v) {\n    _regeneratorRuntime = v;\n  }\n}, 0);\nvar fs;\nmodule.link(\"fs\", {\n  \"*\": function (v) {\n    fs = v;\n  }\n}, 0);\nvar OLLs, PLLs;\nmodule.link(\"./server/const\", {\n  OLLs: function (v) {\n    OLLs = v;\n  },\n  PLLs: function (v) {\n    PLLs = v;\n  }\n}, 1);\nvar filesPath = 'public/images/';\n\nvar getSVGcontent = function (_ref, squareLength) {\n  var squares = _ref.squares,\n      strikes = _ref.strikes,\n      _ref$lines = _ref.lines,\n      lines = _ref$lines === void 0 ? [] : _ref$lines;\n  var spacingLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : squareLength / 10;\n  var cubeSize = squares[0].length;\n  console.log('lines', lines);\n  var colorPrimary = '#ffff45';\n  var colorSecondary = 'gray';\n  var colorBackground = 'black';\n  var squaresFormatted = squares.map(function (row, rowIndex) {\n    return row.map(function (face, columnIndex) {\n      return {\n        x: spacingLength * 2 + columnIndex * (squareLength + spacingLength),\n        y: spacingLength * 2 + rowIndex * (squareLength + spacingLength),\n        width: squareLength,\n        height: squareLength,\n        fill: face ? colorPrimary : colorSecondary,\n        stroke: colorBackground,\n        strokeWidth: spacingLength\n      };\n    });\n  });\n\n  var getStrikePosition = function (index) {\n    if (index === 0) {\n      return 0.5 * spacingLength;\n    }\n\n    if (index - 1 === cubeSize) {\n      return 1.5 * spacingLength + (index - 1) * (spacingLength + squareLength);\n    }\n\n    return spacingLength * 2 + (index - 1) * (spacingLength + squareLength);\n  };\n\n  var strikesTop = strikes[0] ? strikes[0].map(function (strike, strikeIndex) {\n    return {\n      x: getStrikePosition(strikeIndex + 1),\n      y: getStrikePosition(0),\n      width: squareLength,\n      height: spacingLength,\n      fill: strike ? colorPrimary : ''\n    };\n  }) : [];\n  var strikesRight = strikes[1] ? strikes[1].map(function (strike, strikeIndex) {\n    return {\n      x: getStrikePosition(cubeSize + 1),\n      y: getStrikePosition(strikeIndex + 1),\n      width: spacingLength,\n      height: squareLength,\n      fill: strike ? colorPrimary : ''\n    };\n  }) : [];\n  var strikesBottom = strikes[2] ? strikes[2].map(function (strike, strikeIndex) {\n    return {\n      x: getStrikePosition(strikeIndex + 1),\n      y: getStrikePosition(cubeSize + 1),\n      width: squareLength,\n      height: spacingLength,\n      fill: strike ? colorPrimary : ''\n    };\n  }) : [];\n  var strikesLeft = strikes[3] ? strikes[3].map(function (strike, strikeIndex) {\n    return {\n      x: getStrikePosition(0),\n      y: getStrikePosition(strikeIndex + 1),\n      width: spacingLength,\n      height: squareLength,\n      fill: strike ? colorPrimary : ''\n    };\n  }) : [];\n  var strikesFormatted = [strikesTop, strikesRight, strikesBottom, strikesLeft];\n\n  var getCenter = function (_ref2) {\n    var squareX = _ref2.x,\n        squareY = _ref2.y;\n    var x = 2 * spacingLength + 0.5 * squareLength + (spacingLength + squareLength) * squareX;\n    var y = 2 * spacingLength + 0.5 * squareLength + (spacingLength + squareLength) * squareY;\n    return {\n      x: x,\n      y: y\n    };\n  };\n\n  var getPoints = function (line) {\n    return line.map(function (point) {\n      return getCenter(point);\n    });\n  };\n\n  var lineToMarker = function (pointA, pointB) {\n    var pointC = {\n      x: pointA.x + Math.abs(pointB.x - pointA.x),\n      y: pointA.y\n    };\n    var rotationAngle = Math.atan2(pointB.y - pointA.y, pointB.x - pointA.x) * 180 / Math.PI - Math.atan2(pointC.y - pointA.y, pointC.x - pointA.x);\n    var leftBackPoint = {\n      x: pointB.x - 0.25 * squareLength,\n      y: pointB.y - 0.25 * squareLength\n    };\n    var rightBackPoint = {\n      x: pointB.x - 0.25 * squareLength,\n      y: pointB.y + 0.25 * squareLength\n    };\n    console.log('pointA', pointA);\n    console.log('pointB', pointB);\n    console.log('leftBackPoint', leftBackPoint);\n    console.log('rightBackPoint', rightBackPoint);\n    return {\n      points: [leftBackPoint, pointB, rightBackPoint],\n      angle: rotationAngle\n    };\n  };\n\n  var getMarkers = function (line) {\n    var markers = [];\n\n    for (var i = 0; i < line.length; i++) {\n      if (i > 0) {\n        markers.push(lineToMarker(line[i - 1], line[i]));\n      }\n    }\n\n    markers.push(lineToMarker(line[line.length - 1], line[0]));\n    return markers;\n  };\n\n  var linesFormatted = lines.map(function (line) {\n    return getPoints(line);\n  });\n  var boardSize = spacingLength * 3 + cubeSize * (squareLength + spacingLength);\n  var content = \"\\n    <svg \\n      xmlns=\\\"http://www.w3.org/2000/svg\\\" \\n      width=\\\"\" + boardSize + \"\\\"\\n      height=\\\"\" + boardSize + \"\\\"\\n    >\\n      <!-- BACKGROUND -->\\n      <rect \\n        width=\\\"\" + boardSize + \"\\\"\\n        height=\\\"\" + boardSize + \"\\\"\\n        fill=\\\"\" + colorBackground + \"\\\"  \\n      />\\n      \\n      <!-- SQUARES -->\\n      \" + squaresFormatted.map(function (row) {\n    return row.map(function (square) {\n      return \"\\n                <rect \\n                  x=\\\"\" + square.x + \"\\\" \\n                  y=\\\"\" + square.y + \"\\\" \\n                  width=\\\"\" + square.width + \"\\\"\\n                  height=\\\"\" + square.height + \"\\\"\\n                  fill=\\\"\" + square.fill + \"\\\"\\n                />\\n              \";\n    }).join('');\n  }).join('') + \"\\n      \\n          \\n      <!-- STRIKES -->\\n      \" + strikesFormatted.map(function (strikeGroup) {\n    return strikeGroup.filter(function (strike) {\n      return strike.fill;\n    }).map(function (strike) {\n      return \"\\n                <rect \\n                  x=\\\"\" + strike.x + \"\\\" \\n                  y=\\\"\" + strike.y + \"\\\" \\n                  width=\\\"\" + strike.width + \"\\\"\\n                  height=\\\"\" + strike.height + \"\\\"\\n                  fill=\\\"\" + strike.fill + \"\\\"\\n                />\\n              \";\n    }).join('');\n  }).join('') + \"\\n      \\n      <!-- LINES -->\\n      \" + linesFormatted.map(function (line) {\n    return \"\\n          <polyline \\n          points=\\\"\" + (line.reduce(function (points, point) {\n      return points + \" \" + point.x + \",\" + point.y;\n    }, '') + (\" \" + line[0].x + \",\" + line[0].y)) + \"\\\" \\n          fill=\\\"none\\\" \\n          stroke=\\\"orange\\\" \\n          stroke-width=\\\"3\\\"\\n          />\\n        \";\n  }) + \"\\n      \\n      <!-- MARKERS -->\\n      \" + linesFormatted.map(function (line) {\n    return getMarkers(line).map(function (_ref3) {\n      var points = _ref3.points,\n          angle = _ref3.angle;\n      return \"\\n                <polygon \\n                  points=\\\"\" + points.reduce(function (points, point) {\n        return points + \" \" + point.x + \",\" + point.y;\n      }, '') + \"\\\"\\n                  fill=\\\"red\\\" \\n                  transform=\\\"\\n                  translate(\" + points[1].x + \" \" + points[1].y + \") \\n                  rotate(\" + angle + \" 0 0) \\n                  translate(\" + -1 * points[1].x + \" \" + -1 * points[1].y + \")\\\"\\n                />\\n              \";\n    }).join('');\n  }).join('') + \"\\n    </svg>\\n  \";\n  return content;\n};\n\nvar writeFile = function (path, name, extension, content) {\n  return new Promise(function (resolve) {\n    fs.writeFile(\"\" + path + name + extension, content, function (err) {\n      if (err) {\n        throw err;\n      }\n\n      resolve(\"File \" + name + \" created successfully\");\n    });\n  });\n};\n/* write files */\n\n\nOLLs.filter(function (OLL) {\n  return OLL.squares;\n}).forEach(function () {\n  function _callee(scramble) {\n    var content, result;\n    return _regeneratorRuntime.async(function () {\n      function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              content = getSVGcontent(scramble, 25, 3);\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(writeFile(filesPath, scramble.name, '.svg', content));\n\n            case 3:\n              result = _context.sent;\n              console.info(result);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }\n\n      return _callee$;\n    }());\n  }\n\n  return _callee;\n}());\nPLLs.filter(function (PLL) {\n  return PLL.lines && PLL.lines.length;\n}).forEach(function () {\n  function _callee2(scramble) {\n    var content, result;\n    return _regeneratorRuntime.async(function () {\n      function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              content = getSVGcontent(scramble, 25, 3);\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(writeFile(filesPath, scramble.name, '.svg', content));\n\n            case 3:\n              result = _context2.sent;\n              console.info(result);\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }\n\n      return _callee2$;\n    }());\n  }\n\n  return _callee2;\n}());","map":{"version":3,"sources":["generateSVGs.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\nimport { algorithm, line, OLLs, PLLs, point } from './server/const';\n\ntype strikeFormatted = {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  fill: string;\n};\n\ntype squareFormatted = strikeFormatted & {\n  stroke: string;\n  strokeWidth: number;\n};\n\ntype marker = {\n  points: point[];\n  angle: number;\n};\n\nconst filesPath: string = 'public/images/';\n\nconst getSVGcontent = (\n  { squares, strikes, lines = [] }: algorithm,\n  squareLength: number,\n  spacingLength: number = squareLength / 10\n): string => {\n  const cubeSize = squares[0].length;\n\n  console.log('lines', lines);\n\n  const colorPrimary = '#ffff45';\n  const colorSecondary = 'gray';\n  const colorBackground = 'black';\n\n  const squaresFormatted: squareFormatted[][] = squares.map(\n    (row: number[], rowIndex: number) =>\n      row.map((face, columnIndex) => ({\n        x: spacingLength * 2 + columnIndex * (squareLength + spacingLength),\n        y: spacingLength * 2 + rowIndex * (squareLength + spacingLength),\n        width: squareLength,\n        height: squareLength,\n        fill: face ? colorPrimary : colorSecondary,\n        stroke: colorBackground,\n        strokeWidth: spacingLength\n      }))\n  );\n\n  const getStrikePosition = (index: number): number => {\n    if (index === 0) {\n      return 0.5 * spacingLength;\n    }\n\n    if (index - 1 === cubeSize) {\n      return 1.5 * spacingLength + (index - 1) * (spacingLength + squareLength);\n    }\n\n    return spacingLength * 2 + (index - 1) * (spacingLength + squareLength);\n  };\n\n  const strikesTop: strikeFormatted[] = strikes[0]\n    ? strikes[0].map((strike: number, strikeIndex: number) => ({\n        x: getStrikePosition(strikeIndex + 1),\n        y: getStrikePosition(0),\n        width: squareLength,\n        height: spacingLength,\n        fill: strike ? colorPrimary : ''\n      }))\n    : [];\n\n  const strikesRight: strikeFormatted[] = strikes[1]\n    ? strikes[1].map((strike: number, strikeIndex: number) => ({\n        x: getStrikePosition(cubeSize + 1),\n        y: getStrikePosition(strikeIndex + 1),\n        width: spacingLength,\n        height: squareLength,\n        fill: strike ? colorPrimary : ''\n      }))\n    : [];\n\n  const strikesBottom: strikeFormatted[] = strikes[2]\n    ? strikes[2].map((strike: number, strikeIndex: number) => ({\n        x: getStrikePosition(strikeIndex + 1),\n        y: getStrikePosition(cubeSize + 1),\n        width: squareLength,\n        height: spacingLength,\n        fill: strike ? colorPrimary : ''\n      }))\n    : [];\n\n  const strikesLeft: strikeFormatted[] = strikes[3]\n    ? strikes[3].map((strike: number, strikeIndex: number) => ({\n        x: getStrikePosition(0),\n        y: getStrikePosition(strikeIndex + 1),\n        width: spacingLength,\n        height: squareLength,\n        fill: strike ? colorPrimary : ''\n      }))\n    : [];\n\n  const strikesFormatted: strikeFormatted[][] = [\n    strikesTop,\n    strikesRight,\n    strikesBottom,\n    strikesLeft\n  ];\n\n  const getCenter = ({ x: squareX, y: squareY }: point) => {\n    const x =\n      2 * spacingLength +\n      0.5 * squareLength +\n      (spacingLength + squareLength) * squareX;\n    const y =\n      2 * spacingLength +\n      0.5 * squareLength +\n      (spacingLength + squareLength) * squareY;\n\n    return { x, y };\n  };\n\n  const getPoints = (line: line): line => line.map(point => getCenter(point));\n\n  const lineToMarker = (pointA: point, pointB: point) => {\n    const pointC = {\n      x: pointA.x + Math.abs(pointB.x - pointA.x),\n      y: pointA.y\n    };\n\n    const rotationAngle =\n      (Math.atan2(pointB.y - pointA.y, pointB.x - pointA.x) * 180) / Math.PI -\n      Math.atan2(pointC.y - pointA.y, pointC.x - pointA.x);\n\n    const leftBackPoint = {\n      x: pointB.x - 0.25 * squareLength,\n      y: pointB.y - 0.25 * squareLength\n    };\n\n    const rightBackPoint = {\n      x: pointB.x - 0.25 * squareLength,\n      y: pointB.y + 0.25 * squareLength\n    };\n\n    console.log('pointA', pointA);\n    console.log('pointB', pointB);\n    console.log('leftBackPoint', leftBackPoint);\n    console.log('rightBackPoint', rightBackPoint);\n\n    return {\n      points: [leftBackPoint, pointB, rightBackPoint],\n      angle: rotationAngle\n    };\n  };\n\n  const getMarkers = (line: line): marker[] => {\n    const markers = [];\n\n    for (let i = 0; i < line.length; i++) {\n      if (i > 0) {\n        markers.push(lineToMarker(line[i - 1], line[i]));\n      }\n    }\n\n    markers.push(lineToMarker(line[line.length - 1], line[0]));\n\n    return markers;\n  };\n\n  const linesFormatted: line[] = lines.map(line => getPoints(line));\n\n  const boardSize: number =\n    spacingLength * 3 + cubeSize * (squareLength + spacingLength);\n\n  const content: string = `\n    <svg \n      xmlns=\"http://www.w3.org/2000/svg\" \n      width=\"${boardSize}\"\n      height=\"${boardSize}\"\n    >\n      <!-- BACKGROUND -->\n      <rect \n        width=\"${boardSize}\"\n        height=\"${boardSize}\"\n        fill=\"${colorBackground}\"  \n      />\n      \n      <!-- SQUARES -->\n      ${squaresFormatted\n        .map(row =>\n          row\n            .map(\n              square => `\n                <rect \n                  x=\"${square.x}\" \n                  y=\"${square.y}\" \n                  width=\"${square.width}\"\n                  height=\"${square.height}\"\n                  fill=\"${square.fill}\"\n                />\n              `\n            )\n            .join('')\n        )\n        .join('')}\n      \n          \n      <!-- STRIKES -->\n      ${strikesFormatted\n        .map(strikeGroup =>\n          strikeGroup\n            .filter(strike => strike.fill)\n            .map(\n              strike => `\n                <rect \n                  x=\"${strike.x}\" \n                  y=\"${strike.y}\" \n                  width=\"${strike.width}\"\n                  height=\"${strike.height}\"\n                  fill=\"${strike.fill}\"\n                />\n              `\n            )\n            .join('')\n        )\n        .join('')}\n      \n      <!-- LINES -->\n      ${linesFormatted.map(\n        line => `\n          <polyline \n          points=\"${line.reduce(\n            (points, point) => `${points} ${point.x},${point.y}`,\n            ''\n          ) + ` ${line[0].x},${line[0].y}`}\" \n          fill=\"none\" \n          stroke=\"orange\" \n          stroke-width=\"3\"\n          />\n        `\n      )}\n      \n      <!-- MARKERS -->\n      ${linesFormatted\n        .map((line: line) =>\n          getMarkers(line)\n            .map(\n              ({ points, angle }: { points: point[]; angle: number }) => `\n                <polygon \n                  points=\"${points.reduce(\n                    (points: string, point: point) =>\n                      `${points} ${point.x},${point.y}`,\n                    ''\n                  )}\"\n                  fill=\"red\" \n                  transform=\"\n                  translate(${points[1].x} ${points[1].y}) \n                  rotate(${angle} 0 0) \n                  translate(${-1 * points[1].x} ${-1 * points[1].y})\"\n                />\n              `\n            )\n            .join('')\n        )\n        .join('')}\n    </svg>\n  `;\n\n  return content;\n};\n\nconst writeFile = (\n  path: string,\n  name: string,\n  extension: string,\n  content: string\n) => {\n  return new Promise(resolve => {\n    fs.writeFile(`${path}${name}${extension}`, content, err => {\n      if (err) {\n        throw err;\n      }\n\n      resolve(`File ${name} created successfully`);\n    });\n  });\n};\n\n/* write files */\nOLLs.filter((OLL: algorithm) => OLL.squares).forEach(\n  async (scramble: algorithm) => {\n    const content = getSVGcontent(scramble, 25, 3);\n    const result = await writeFile(filesPath, scramble.name, '.svg', content);\n    console.info(result);\n  }\n);\n\nPLLs.filter((PLL: algorithm) => PLL.lines && PLL.lines.length).forEach(\n  async (scramble: algorithm) => {\n    const content = getSVGcontent(scramble, 25, 3);\n    const result = await writeFile(filesPath, scramble.name, '.svg', content);\n    console.info(result);\n  }\n);\n"],"sourceRoot":""},"sourceType":"module","hash":"499c2748110de59adbf87c3dd04dc50e30466c95"}

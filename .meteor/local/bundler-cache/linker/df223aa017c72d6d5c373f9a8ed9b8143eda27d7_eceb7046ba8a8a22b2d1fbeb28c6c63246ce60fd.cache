[{"type":"js","data":"/* Imports for global scope */\n\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nDDP = Package['ddp-client'].DDP;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nTemplate = Package['templating-runtime'].Template;\nmeteorInstall = Package.modules.meteorInstall;\nPromise = Package.promise.Promise;\nAutoupdate = Package.autoupdate.Autoupdate;\nReload = Package.reload.Reload;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"client\":{\"template.main.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                  //\n// client/template.main.js                                                                          //\n//                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                    //\n\nTemplate.body.addContent((function() {\n  var view = this;\n  return HTML.Raw('<div id=\"render-target\"></div>');\n}));\nMeteor.startup(Template.body.renderToDocument);\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"utils.ts\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                  //\n// client/utils.ts                                                                                  //\n//                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                    //\nmodule.export({\n  getAverage: () => getAverage\n});\n\nconst getAverage = results => {\n  if (!results || results.length === 0) {\n    return 0;\n  }\n\n  return Math.round(results.reduce((sum, result) => sum + result, 0) / results.length);\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"main.tsx\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                  //\n// client/main.tsx                                                                                  //\n//                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                    //\nlet React;\nmodule.link(\"react\", {\n  default(v) {\n    React = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet render;\nmodule.link(\"react-dom\", {\n  render(v) {\n    render = v;\n  }\n\n}, 2);\nlet Container;\nmodule.link(\"./imports/components/container\", {\n  default(v) {\n    Container = v;\n  }\n\n}, 3);\nmodule.link(\"rc-slider/assets/index.css\");\nmodule.link(\"react-semantic-toasts/styles/react-semantic-alert.css\");\nMeteor.startup(() => {\n  render(React.createElement(Container, null), document.getElementById('render-target'));\n});\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"lib\":{\"global-helpers.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                  //\n// lib/global-helpers.js                                                                            //\n//                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                    //\nmodule.export({\n  getRandomScramble: () => getRandomScramble\n});\nconst allowedMoves = ['F', \"F'\", 'F2', 'B', \"B'\", 'B2', 'R', \"R'\", 'R2', 'L', \"L'\", 'L2', 'U', \"U'\", 'U2', 'D', \"D'\", 'D2'];\n\nconst getRandomMove = () => allowedMoves[Math.floor(Math.random() * allowedMoves.length)];\n\nconst movesConflict = (moveA, moveB) => moveA && moveB && moveA.split('').some(character => moveB.includes(character));\n\nconst getRandomScramble = movesNr => {\n  const moves = [];\n  let move;\n  let previousMove;\n\n  for (let i = 0; i < movesNr; i++) {\n    move = getRandomMove();\n\n    while (movesConflict(move, previousMove)) {\n      move = getRandomMove();\n    }\n\n    previousMove = move;\n    moves.push(move);\n  }\n\n  return moves.join(' ');\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"collections\":{\"algorithms.ts\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                  //\n// collections/algorithms.ts                                                                        //\n//                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                    //\nmodule.export({\n  Algorithms: () => Algorithms\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 1);\nlet check;\nmodule.link(\"meteor/check\", {\n  check(v) {\n    check = v;\n  }\n\n}, 2);\nlet expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 3);\nconst Algorithms = new Mongo.Collection('algorithms');\nMeteor.methods({\n  'algorithms.toggleActive': (algId, active) => {\n    check(active, Boolean);\n    check(algId, String);\n    Algorithms.update(algId, {\n      $set: {\n        active\n      }\n    });\n  },\n  'algorithms.activateAll': category => {\n    Algorithms.update({\n      category\n    }, {\n      $set: {\n        active: true\n      }\n    }, {\n      multi: true\n    });\n  },\n  'algorithms.deactivateAll': category => {\n    Algorithms.update({\n      category\n    }, {\n      $set: {\n        active: false\n      }\n    }, {\n      multi: true\n    });\n  },\n  'algorithms.insert': (_ref) => {\n    let {\n      category,\n      image,\n      scramble,\n      solution,\n      subtype,\n      type\n    } = _ref;\n    expect(category).to.be.a('string');\n    expect(image).to.be.a('string');\n    expect(scramble).to.be.a('string');\n    expect(solution).to.be.a('string');\n    expect(subtype).to.be.a('string');\n    expect(type).to.be.a('string'); // Make sure the user is logged in before inserting a algorithm\n\n    /* if (! Meteor.userId()) {\n         throw new Meteor.Error('not-authorized');\n     }*/\n\n    const doc = {\n      createdAt: new Date(),\n      category,\n      image,\n      scramble,\n      solution,\n      subtype,\n      type\n    };\n    Algorithms.insert(doc);\n  },\n\n  'algorithms.search'(text) {\n    check(text, String);\n    return Algorithms.find();\n  },\n\n  'algorithms.remove'(algorithmId) {\n    check(algorithmId, String);\n    /*const algorithm = Algorithms.findOne(algorithmId);\n    if (algorithm.private && algorithm.owner !== Meteor.userId()) {\n      // If the algorithm is private, make sure only the owner can delete it\n          throw new Meteor.Error('not-authorized');\n    }*/\n\n    Algorithms.remove(algorithmId);\n  }\n  /*,\n  'algorithms.setChecked'(algorithmId, setChecked) {\n      check(algorithmId, String);\n      check(setChecked, Boolean);\n         const algorithm = Algorithms.findOne(algorithmId);\n      if (algorithm.private && algorithm.owner !== Meteor.userId()) {\n            // If the algorithm is private, make sure only the owner can check it off\n                throw new Meteor.Error('not-authorized');\n          }\n         Algorithms.update(algorithmId, { $set: { checked: setChecked } });\n  },\n  'algorithms.setPrivate'(algorithmId, setToPrivate) {\n      check(algorithmId, String);\n      check(setToPrivate, Boolean);\n         const algorithm = Algorithms.findOne(algorithmId);\n         // Make sure only the algorithm owner can make a algorithm private\n      if (algorithm.owner !== Meteor.userId()) {\n          throw new Meteor.Error('not-authorized');\n      }\n         Algorithms.update(algorithmId, { $set: { private: setToPrivate } });\n  },*/\n\n\n});\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"results.ts\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                  //\n// collections/results.ts                                                                           //\n//                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                    //\nmodule.export({\n  Results: () => Results\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 1);\nlet check;\nmodule.link(\"meteor/check\", {\n  check(v) {\n    check = v;\n  }\n\n}, 2);\nconst Results = new Mongo.Collection('results');\nMeteor.methods({\n  'results.insert': (_ref) => {\n    let {\n      algorithmId,\n      category,\n      real,\n      scramble,\n      time\n    } = _ref;\n    check(category, String);\n    check(real, Boolean);\n    check(time, Number);\n\n    if (category === 'OLL' || category === 'PLL' || category === '3x3x3') {\n      check(scramble, String);\n    }\n\n    if (category === 'OLL' || category === 'PLL') {\n      check(algorithmId, String);\n    } // Make sure the user is logged in before inserting a result\n\n    /* if (! Meteor.userId()) {\n     throw new Meteor.Error('not-authorized');\n     }*/\n\n\n    const doc = {\n      algorithmId,\n      category,\n      createdAt: new Date(),\n      real,\n      scramble,\n      time\n    };\n    Results.insert(doc);\n  },\n  'results.search': text => {\n    check(text, String);\n    return Results.find();\n  },\n  'results.remove': resultId => {\n    check(resultId, String);\n    /*const result = Results.findOne(resultId);\n     if (result.private && result.owner !== Meteor.userId()) {\n     // If the result is private, make sure only the owner can delete it\n     throw new Meteor.Error('not-authorized');\n     }*/\n\n    Results.remove(resultId);\n  }\n});\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\",\n    \".html\",\n    \".ts\",\n    \".jsx\",\n    \".mjs\",\n    \".tsx\",\n    \".css\",\n    \".less\"\n  ]\n});\n\nrequire(\"/client/template.main.js\");\nrequire(\"/lib/global-helpers.js\");\nrequire(\"/client/utils.ts\");\nrequire(\"/collections/algorithms.ts\");\nrequire(\"/collections/results.ts\");\nrequire(\"/client/main.tsx\");","hash":"d3fedcad6fa5ad824dc495f7f6baddcde32f2b2b","servePath":"/app.js","sourceMap":{"version":3,"sources":["client/utils.ts","client/main.tsx","lib/global-helpers.js","collections/algorithms.ts","collections/results.ts"],"names":["module","export","getRandomScramble","allowedMoves","getRandomMove","Math","floor","random","length","movesConflict","moveA","moveB","split","some","character","includes","movesNr","moves","move","previousMove","i","push","join"],"mappings":"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","file":"/app.js","sourcesContent":["export const getAverage = (results: number[]): number => {\n  if (!results || results.length === 0) {\n    return 0;\n  }\n\n  return Math.round(\n    results.reduce((sum, result) => sum + result, 0) / results.length\n  );\n};\n","import React from 'react';\nimport { Meteor } from 'meteor/meteor';\nimport { render } from 'react-dom';\n\nimport Container from './imports/components/container';\n\nimport 'rc-slider/assets/index.css';\nimport 'react-semantic-toasts/styles/react-semantic-alert.css';\n\nMeteor.startup(() => {\n  render(<Container />, document.getElementById('render-target'));\n});\n","const allowedMoves = [\n  'F',\n  \"F'\",\n  'F2',\n  'B',\n  \"B'\",\n  'B2',\n  'R',\n  \"R'\",\n  'R2',\n  'L',\n  \"L'\",\n  'L2',\n  'U',\n  \"U'\",\n  'U2',\n  'D',\n  \"D'\",\n  'D2'\n];\n\nconst getRandomMove = () =>\n  allowedMoves[Math.floor(Math.random() * allowedMoves.length)];\nconst movesConflict = (moveA, moveB) =>\n  moveA &&\n  moveB &&\n  moveA.split('').some(character => moveB.includes(character));\n\nexport const getRandomScramble = movesNr => {\n  const moves = [];\n\n  let move;\n  let previousMove;\n  for (let i = 0; i < movesNr; i++) {\n    move = getRandomMove();\n    while (movesConflict(move, previousMove)) {\n      move = getRandomMove();\n    }\n\n    previousMove = move;\n    moves.push(move);\n  }\n\n  return moves.join(' ');\n};\n","import { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { check } from 'meteor/check';\n\nimport { expect } from 'chai';\n\nexport const Algorithms = new Mongo.Collection('algorithms');\n\nMeteor.methods({\n  'algorithms.toggleActive': (algId, active) => {\n    check(active, Boolean);\n    check(algId, String);\n\n    Algorithms.update(algId, { $set: { active } });\n  },\n  'algorithms.activateAll': category => {\n    Algorithms.update(\n      { category },\n      { $set: { active: true } },\n      { multi: true }\n    );\n  },\n  'algorithms.deactivateAll': category => {\n    Algorithms.update(\n      { category },\n      { $set: { active: false } },\n      { multi: true }\n    );\n  },\n  'algorithms.insert': ({\n    category,\n    image,\n    scramble,\n    solution,\n    subtype,\n    type\n  }) => {\n    expect(category).to.be.a('string');\n    expect(image).to.be.a('string');\n    expect(scramble).to.be.a('string');\n    expect(solution).to.be.a('string');\n    expect(subtype).to.be.a('string');\n    expect(type).to.be.a('string');\n\n    // Make sure the user is logged in before inserting a algorithm\n    /* if (! Meteor.userId()) {\n         throw new Meteor.Error('not-authorized');\n     }*/\n\n    const doc = {\n      createdAt: new Date(),\n      category,\n      image,\n      scramble,\n      solution,\n      subtype,\n      type\n    };\n\n    Algorithms.insert(doc);\n  },\n  'algorithms.search'(text) {\n    check(text, String);\n\n    return Algorithms.find();\n  },\n  'algorithms.remove'(algorithmId) {\n    check(algorithmId, String);\n\n    /*const algorithm = Algorithms.findOne(algorithmId);\n    if (algorithm.private && algorithm.owner !== Meteor.userId()) {\n      // If the algorithm is private, make sure only the owner can delete it\n          throw new Meteor.Error('not-authorized');\n    }*/\n\n    Algorithms.remove(algorithmId);\n  } /*,\n    'algorithms.setChecked'(algorithmId, setChecked) {\n        check(algorithmId, String);\n        check(setChecked, Boolean);\n\n        const algorithm = Algorithms.findOne(algorithmId);\n        if (algorithm.private && algorithm.owner !== Meteor.userId()) {\n              // If the algorithm is private, make sure only the owner can check it off\n                  throw new Meteor.Error('not-authorized');\n            }\n\n        Algorithms.update(algorithmId, { $set: { checked: setChecked } });\n    },\n    'algorithms.setPrivate'(algorithmId, setToPrivate) {\n        check(algorithmId, String);\n        check(setToPrivate, Boolean);\n\n        const algorithm = Algorithms.findOne(algorithmId);\n\n        // Make sure only the algorithm owner can make a algorithm private\n        if (algorithm.owner !== Meteor.userId()) {\n            throw new Meteor.Error('not-authorized');\n        }\n\n        Algorithms.update(algorithmId, { $set: { private: setToPrivate } });\n    },*/\n});\n","import { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { check } from 'meteor/check';\n\nexport const Results = new Mongo.Collection('results');\n\nMeteor.methods({\n  'results.insert': ({ algorithmId, category, real, scramble, time }) => {\n    check(category, String);\n    check(real, Boolean);\n    check(time, Number);\n\n    if (category === 'OLL' || category === 'PLL' || category === '3x3x3') {\n      check(scramble, String);\n    }\n\n    if (category === 'OLL' || category === 'PLL') {\n      check(algorithmId, String);\n    }\n\n    // Make sure the user is logged in before inserting a result\n    /* if (! Meteor.userId()) {\n     throw new Meteor.Error('not-authorized');\n     }*/\n\n    const doc = {\n      algorithmId,\n      category,\n      createdAt: new Date(),\n      real,\n      scramble,\n      time\n    };\n\n    Results.insert(doc);\n  },\n  'results.search': text => {\n    check(text, String);\n\n    return Results.find();\n  },\n  'results.remove': resultId => {\n    check(resultId, String);\n\n    /*const result = Results.findOne(resultId);\n     if (result.private && result.owner !== Meteor.userId()) {\n     // If the result is private, make sure only the owner can delete it\n     throw new Meteor.Error('not-authorized');\n     }*/\n\n    Results.remove(resultId);\n  }\n});\n"]}}]
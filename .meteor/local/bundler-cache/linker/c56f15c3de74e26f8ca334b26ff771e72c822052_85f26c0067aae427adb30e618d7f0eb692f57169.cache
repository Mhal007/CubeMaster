[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nWebAppInternals = Package.webapp.WebAppInternals;\nmain = Package.webapp.main;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nPromise = Package.promise.Promise;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"lib\":{\"global-helpers.js\":function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// lib/global-helpers.js                                                                                     //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nconst allowedMoves = [\n  'F',\n  \"F'\",\n  'F2',\n  'B',\n  \"B'\",\n  'B2',\n  'R',\n  \"R'\",\n  'R2',\n  'L',\n  \"L'\",\n  'L2',\n  'U',\n  \"U'\",\n  'U2',\n  'D',\n  \"D'\",\n  'D2'\n];\n\nconst getRandomMove = () =>\n  allowedMoves[Math.floor(Math.random() * allowedMoves.length)];\nconst movesConflict = (moveA, moveB) =>\n  moveA &&\n  moveB &&\n  moveA.split('').some(character => moveB.includes(character));\n\nexport const getRandomScramble = movesNr => {\n  const moves = [];\n\n  let move;\n  let previousMove;\n  for (let i = 0; i < movesNr; i++) {\n    move = getRandomMove();\n    while (movesConflict(move, previousMove)) {\n      move = getRandomMove();\n    }\n\n    previousMove = move;\n    moves.push(move);\n  }\n\n  return moves.join(' ');\n};\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"server\":{\"publications\":{\"algorithms.js\":function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// server/publications/algorithms.js                                                                         //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nimport { Meteor } from 'meteor/meteor';\nimport { Algorithms } from '../../collections/algorithms';\n\n// TODO Only publish algorithms that are public or belong to the current user\nMeteor.publish('algorithms', () => Algorithms.find());\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"results.js\":function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// server/publications/results.js                                                                            //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nimport { Meteor } from 'meteor/meteor';\nimport { Results } from '../../collections/results';\n\n// TODO Only publish algorithms that are public or belong to the current user\nMeteor.publish('results', () => Results.find());\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"algorithmsCreation.js\":function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// server/algorithmsCreation.js                                                                              //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nimport { Meteor } from 'meteor/meteor';\nimport { Algorithms } from '../collections/algorithms';\n\nimport { OLLs, PLLs } from './const';\n\nexport const createAlgorithms = () => {\n  const isOLL = !!Algorithms.findOne({ category: 'OLL' });\n  const isPLL = !!Algorithms.findOne({ category: 'PLL' });\n\n  !isOLL &&\n    OLLs.forEach(algorithm => Meteor.call('algorithms.insert', algorithm));\n  !isPLL &&\n    PLLs.forEach(algorithm => Meteor.call('algorithms.insert', algorithm));\n};\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"const.ts\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// server/const.ts                                                                                           //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nmodule.export({\n  OLLs: () => OLLs,\n  PLLs: () => PLLs\n});\nconst squresFull = [[1, 1, 1], [1, 1, 1], [1, 1, 1]];\nconst srikesNone = [];\nconst OLLs = [{\n  active: true,\n  category: 'OLL',\n  image: 'oll_1.svg',\n  name: 'oll_1',\n  scramble: \"RU2 R' U' RUR' U' RU' R' U'\",\n  solution: \"RU2 R' U' RUR' U' RU' R'\",\n  type: 'Cross',\n  subtype: 'Cross',\n  squares: [[0, 1, 0], [1, 1, 1], [0, 1, 0]],\n  strikes: [[1, 0, 1], [0, 0, 0], [1, 0, 1], [0, 0, 0]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_2.svg',\n  name: 'oll_2',\n  scramble: \"RU2 R2 U' R2U' R2U2R\",\n  solution: \"(RU2 R2 U') (R2U') (R2U2R)\",\n  type: 'Cross',\n  subtype: 'Cross',\n  squares: [[0, 1, 0], [1, 1, 1], [0, 1, 0]],\n  strikes: [[0, 0, 1], [0, 0, 0], [0, 0, 1], [1, 0, 1]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_3.svg',\n  name: 'oll_3',\n  scramble: \"x' (RUR' DRU' R' D' F)\",\n  solution: \"x' (RU' R' DRUR' D')\",\n  type: 'Cross',\n  subtype: 'Cross',\n  squares: [[0, 1, 1], [1, 1, 1], [1, 1, 0]],\n  strikes: [[1, 0, 0], [0, 0, 1], [0, 0, 0], [0, 0, 0]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_4.svg',\n  name: 'oll_4',\n  scramble: \"RU2RDR' U2RD' R2 U2\",\n  solution: \"R2D' RU2R'DRU2R\",\n  type: 'Cross',\n  subtype: 'Cross',\n  squares: [[0, 1, 0], [1, 1, 1], [1, 1, 1]],\n  strikes: [[1, 0, 1], [0, 0, 0], [0, 0, 0], [0, 0, 0]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_5.svg',\n  name: 'oll_5',\n  scramble: \"x' (RU' R' DRUR' D')\",\n  solution: \"x' (RUR' DRU' R' D')\",\n  type: 'Cross',\n  subtype: 'Cross',\n  squares: [[1, 1, 1], [1, 1, 1], [0, 1, 0]],\n  strikes: [[0, 0, 0], [0, 0, 1], [0, 0, 0], [0, 0, 1]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_6.svg',\n  name: 'oll_6',\n  scramble: \"RUR' URU2R' U\",\n  solution: \"L' U' LU' L' U2L\",\n  type: 'Cross',\n  subtype: 'Cross',\n  squares: [[0, 1, 0], [1, 1, 1], [0, 1, 1]],\n  strikes: [[0, 0, 1], [0, 0, 0], [1, 0, 0], [1, 0, 0]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_7.svg',\n  name: 'oll_7',\n  scramble: \"L' U' LU' L' U2LU'\",\n  solution: \"RUR' URU2R'\",\n  type: 'Cross',\n  subtype: 'Cross',\n  squares: [[0, 1, 0], [1, 1, 1], [1, 1, 0]],\n  strikes: [[1, 0, 0], [1, 0, 0], [0, 0, 1], [0, 0, 0]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_8.svg',\n  name: 'oll_8',\n  scramble: \"FR' F' RUR2B' R' BU' R'\",\n  solution: \"(RU2R2FR) (F' U2R' FRF')\",\n  type: 'Dot',\n  subtype: 'Dot',\n  squares: [[0, 0, 0], [0, 1, 0], [0, 0, 0]],\n  strikes: [[0, 1, 0], [1, 1, 1], [0, 1, 0], [1, 1, 1]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_9.svg',\n  name: 'oll_9',\n  scramble: \"FR' F' RU2FR' F' RU' RU' R' U2\",\n  solution: \"LF' L' FU2FU' RU' R' F'\",\n  type: 'Dot',\n  subtype: 'Dot',\n  squares: [[1, 0, 0], [0, 1, 0], [0, 0, 1]],\n  strikes: [[0, 1, 0], [1, 1, 0], [1, 1, 0], [0, 1, 0]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_10.svg',\n  name: 'oll_10',\n  scramble: \"FR' F' RU2R d' RU' R' F' U'\",\n  solution: \"(RU2R2FRF' U2) M' URU' L'\",\n  type: 'Dot',\n  subtype: 'Dot',\n  squares: [[0, 0, 1], [0, 1, 0], [0, 0, 1]],\n  strikes: [[0, 1, 0], [0, 1, 0], [0, 1, 0], [1, 1, 1]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_11.svg',\n  name: 'oll_11',\n  scramble: \"RU2R2FRF' U2R' FRF' U2\",\n  solution: \"(FRUR' U' F') (fRUR' U' f')\",\n  type: 'Dot',\n  subtype: 'Dot',\n  squares: [[0, 0, 0], [0, 1, 0], [0, 0, 0]],\n  strikes: [[0, 1, 1], [0, 1, 0], [0, 1, 1], [1, 1, 1]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_12.svg',\n  name: 'oll_12',\n  scramble: \"R' F' U2F2URU' R' F' U2R\",\n  solution: \"R' U2FRUR' U' F2U2FR\",\n  type: 'Dot',\n  subtype: 'Dot',\n  squares: [[1, 0, 1], [0, 1, 0], [0, 0, 0]],\n  strikes: [[0, 1, 0], [0, 1, 1], [0, 1, 0], [0, 1, 1]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_13.svg',\n  name: 'oll_13',\n  scramble: \"MU' LF2L' U' RU' R2 r\",\n  solution: \"MUR' F2RUL' U L2 l'\",\n  type: 'Dot',\n  subtype: 'Dot',\n  squares: [[0, 0, 0], [0, 1, 0], [1, 0, 0]],\n  strikes: [[1, 1, 0], [1, 1, 0], [0, 1, 1], [0, 1, 0]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_14.svg',\n  name: 'oll_14',\n  scramble: \"MUR' F2RUL' U L2 l'\",\n  solution: \"MU' LF2L' U' RU' R2 r\",\n  type: 'Dot',\n  subtype: 'Dot',\n  squares: [[0, 0, 0], [0, 1, 0], [0, 0, 1]],\n  strikes: [[0, 1, 1], [0, 1, 0], [1, 1, 0], [1, 1, 0]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_15.svg',\n  name: 'oll_15',\n  scramble: \"(MUMUMUMU) (M' UM' UM' UM' U)\",\n  solution: \"M (URUR' U') M2 (U RU' r')\",\n  type: 'Dot',\n  subtype: 'Letter X',\n  squares: [[1, 0, 1], [0, 1, 0], [1, 0, 1]],\n  strikes: [[0, 1, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_16.svg',\n  name: 'oll_16',\n  scramble: \"(R' FRUR' U') (F' UR)\",\n  solution: \"R' U' FURU' R' F' R\",\n  type: 'Dash',\n  subtype: 'Letter P',\n  squares: [[0, 1, 1], [0, 1, 1], [0, 0, 1]],\n  strikes: [[1, 0, 0], [0, 0, 0], [1, 1, 0], [0, 1, 0]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_17.svg',\n  name: 'oll_17',\n  scramble: \"(L F' L' U' L U) (F U' L')\",\n  solution: \"LUF' U' L' ULFL'\",\n  type: 'Dash',\n  subtype: 'Letter P',\n  squares: [[1, 1, 0], [1, 1, 0], [1, 0, 0]],\n  strikes: [[0, 0, 1], [0, 1, 0], [0, 1, 1], [0, 0, 0]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_18.svg',\n  name: 'oll_18',\n  scramble: \"F (RUR' U') F'\",\n  solution: \"FURU' R' F'\",\n  type: 'Dash',\n  subtype: 'Letter P',\n  squares: [[1, 1, 0], [1, 1, 0], [1, 0, 0]],\n  strikes: [[0, 0, 0], [1, 1, 1], [0, 1, 0], [0, 0, 0]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_19.svg',\n  name: 'oll_19',\n  scramble: \"F' (L' U' LU) F\",\n  solution: \"F' U' L' ULF\",\n  type: 'Dash',\n  subtype: 'Letter P',\n  squares: [[0, 1, 1], [0, 1, 1], [0, 0, 1]],\n  strikes: [[0, 0, 0], [0, 0, 0], [0, 1, 0], [1, 1, 1]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_20.svg',\n  name: 'oll_20',\n  scramble: \"B' RBR' U' R' U' RUR' URU2\",\n  solution: \"(L' U' LU' L' U) (LULF' L' F)\",\n  type: 'Dash',\n  subtype: 'Letter W',\n  squares: [[1, 1, 0], [0, 1, 1], [0, 0, 1]],\n  strikes: [[0, 0, 1], [0, 0, 0], [0, 1, 0], [0, 1, 1]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_21.svg',\n  name: 'oll_21',\n  scramble: \"FR' F' RURUR' U' RU' R'\",\n  solution: \"(RUR' URU') (R' U' R' FRF')\",\n  type: 'Dash',\n  subtype: 'Letter W',\n  squares: [[0, 1, 1], [1, 1, 0], [1, 0, 0]],\n  strikes: [[1, 0, 0], [0, 1, 1], [0, 1, 0], [0, 0, 0]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_22.svg',\n  name: 'oll_22',\n  scramble: \"R' F' LF' L' FLF' L' F2RU'\",\n  solution: \"(R' F' LF') ( L' FLF' L' F2R)\",\n  type: 'Dash',\n  subtype: 'Dash',\n  squares: [[0, 1, 0], [1, 1, 0], [0, 0, 0]],\n  strikes: [[0, 0, 0], [1, 1, 1], [0, 1, 0], [1, 0, 1]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_23.svg',\n  name: 'oll_23',\n  scramble: \"LFR' FRF' R' FRF2L' U\",\n  solution: \"LFR' FRF' R' FRF2L'\",\n  type: 'Dash',\n  subtype: 'Dash',\n  squares: [[0, 1, 0], [0, 1, 1], [0, 0, 0]],\n  strikes: [[0, 0, 0], [1, 0, 1], [0, 1, 0], [1, 1, 1]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_24.svg',\n  name: 'oll_24',\n  scramble: \"F' U' L' ULU' L' ULF\",\n  solution: \"F' (L' U' LU) (L' U' LU) F\",\n  type: 'Dash',\n  subtype: 'Dash',\n  squares: [[0, 1, 0], [0, 1, 1], [0, 0, 0]],\n  strikes: [[1, 0, 0], [1, 0, 1], [1, 1, 0], [0, 1, 0]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_25.svg',\n  name: 'oll_25',\n  scramble: \"F URU' R' URU' R' F'\",\n  solution: \"F (RUR' U') (RUR' U') F'\",\n  type: 'Dash',\n  subtype: 'Dash',\n  squares: [[0, 1, 0], [1, 1, 0], [0, 0, 0]],\n  strikes: [[0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 1]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_26.svg',\n  name: 'oll_26',\n  scramble: \"(r U') (r2 U) (r2 U r2 U' r)\",\n  solution: \"(r' U) (r2U') (r2U') (r2Ur')\",\n  type: 'Dash',\n  subtype: 'Dash',\n  squares: [[0, 0, 0], [0, 1, 1], [0, 1, 0]],\n  strikes: [[0, 1, 1], [0, 0, 0], [0, 0, 1], [1, 1, 1]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_27.svg',\n  name: 'oll_27',\n  scramble: \"(r' U) (r2U') (r2U') (r2Ur')U2\",\n  solution: \"(lU') (l2U) (l2U) (l2U' l)\",\n  type: 'Dash',\n  subtype: 'Dash',\n  squares: [[0, 0, 0], [1, 1, 0], [0, 1, 0]],\n  strikes: [[1, 1, 0], [1, 1, 1], [1, 0, 0], [0, 0, 0]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_28.svg',\n  name: 'oll_28',\n  scramble: \"L F' L' U' L F L' y L' U L\",\n  solution: \"L' U' L y' LF' L' ULFL'\",\n  type: 'Dash',\n  subtype: 'Dash',\n  squares: [[1, 0, 0], [0, 1, 1], [0, 1, 0]],\n  strikes: [[0, 1, 1], [0, 0, 1], [1, 0, 0], [0, 1, 0]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_29.svg',\n  name: 'oll_29',\n  scramble: \"R' F R U R' F' R y' R U' R'\",\n  solution: \"RUR' y R' FRU' R' F' R\",\n  type: 'Dash',\n  subtype: 'Dash',\n  squares: [[0, 0, 1], [1, 1, 0], [0, 1, 0]],\n  strikes: [[1, 1, 0], [0, 1, 0], [0, 0, 1], [0, 0, 1]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_30.svg',\n  name: 'oll_30',\n  scramble: \"B' FR' F' RBURU' R' U2\",\n  solution: \"(R' U' RU F) x' (R U' R' UD')\",\n  type: 'Line',\n  subtype: 'Letter C',\n  squares: [[1, 0, 1], [1, 1, 1], [0, 0, 0]],\n  strikes: [[0, 1, 0], [0, 0, 1], [0, 1, 0], [0, 0, 1]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_31.svg',\n  name: 'oll_31',\n  scramble: \"RUB' RBR' U' R'\",\n  solution: \"(R' U' R' F) (RF' U) R\",\n  type: 'Line',\n  subtype: 'Letter C',\n  squares: [[1, 1, 0], [0, 1, 0], [1, 1, 0]],\n  strikes: [[0, 0, 0], [1, 1, 1], [0, 0, 0], [0, 1, 0]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_32.svg',\n  name: 'oll_32',\n  scramble: \"FR' F' RURU' R'\",\n  solution: \"(RUR' U') (R' FRF')\",\n  type: 'Line',\n  subtype: 'Letter T',\n  squares: [[0, 0, 1], [1, 1, 1], [0, 0, 1]],\n  strikes: [[1, 1, 0], [0, 0, 0], [1, 1, 0], [0, 0, 0]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_33.svg',\n  name: 'oll_33',\n  scramble: \"FURU' R' F'\",\n  solution: \"F (RUR' U') F'\",\n  type: 'Line',\n  subtype: 'Letter T',\n  squares: [[0, 0, 1], [1, 1, 1], [0, 0, 1]],\n  strikes: [[0, 1, 0], [0, 0, 0], [0, 1, 0], [1, 0, 1]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_34.svg',\n  name: 'oll_34',\n  scramble: \"B' RBU2R' U' RU' R2U2R\",\n  solution: \"(RU2R2U' RU' R' U2) (F R F')\",\n  type: 'Line',\n  subtype: 'Letter I',\n  squares: [[0, 1, 0], [0, 1, 0], [0, 1, 0]],\n  strikes: [[0, 0, 0], [1, 1, 1], [0, 0, 0], [1, 1, 1]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_35.svg',\n  name: 'oll_35',\n  scramble: \"F (RUR' U') (RUR' U') F'\",\n  solution: \"F (URU' R' URU' R') F'\",\n  type: 'Line',\n  subtype: 'Letter I',\n  squares: [[0, 0, 0], [1, 1, 1], [0, 0, 0]],\n  strikes: [[1, 1, 0], [1, 0, 1], [1, 1, 0], [0, 0, 0]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_36.svg',\n  name: 'oll_36',\n  scramble: \"L' B' LR' U' RUR' U' RUL' BL\",\n  solution: \"(L' B' LU') (R' URU' R' URL' BL)\",\n  type: 'Line',\n  subtype: 'Letter I',\n  squares: [[0, 0, 0], [1, 1, 1], [0, 0, 0]],\n  strikes: [[0, 1, 0], [1, 0, 1], [0, 1, 0], [1, 0, 1]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_37.svg',\n  name: 'oll_37',\n  scramble: \"(R' U' RU' R' U) y' (R' URB)U'\",\n  solution: \"(R' U' RU' R' U) y' (R' URB)\",\n  type: 'Line',\n  subtype: 'Letter I',\n  squares: [[0, 1, 0], [0, 1, 0], [0, 1, 0]],\n  strikes: [[1, 0, 0], [1, 1, 1], [1, 0, 0], [0, 1, 0]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_38.svg',\n  name: 'oll_38',\n  scramble: \"R' F' LF' L' F2R U2\",\n  solution: \"r' U2RUR'U r\",\n  type: 'Dash',\n  subtype: 'Square',\n  squares: [[0, 0, 0], [0, 1, 1], [0, 1, 1]],\n  strikes: [[1, 1, 0], [1, 0, 0], [0, 0, 0], [0, 1, 1]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_39.svg',\n  name: 'oll_39',\n  scramble: \"LFR' FRF2L' U2\",\n  solution: \"l U2L'U'LU' l'\",\n  type: 'Dash',\n  subtype: 'Square',\n  squares: [[0, 0, 0], [1, 1, 0], [1, 1, 0]],\n  strikes: [[0, 1, 1], [0, 1, 1], [0, 0, 0], [1, 0, 0]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_40.svg',\n  name: 'oll_40',\n  scramble: \"R' U2 l U' RUR' l' U2R\",\n  solution: \"x' (R' F2R2U' R' UR' F2R)\",\n  type: 'Dash',\n  subtype: 'Square',\n  squares: [[0, 1, 1], [0, 1, 1], [1, 0, 0]],\n  strikes: [[1, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 0]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_41.svg',\n  name: 'oll_41',\n  scramble: \"(RUR' U') (R' FRF')\",\n  solution: \"FR' F' RURU' R'\",\n  type: 'Dash',\n  subtype: 'Square',\n  squares: [[1, 1, 0], [1, 1, 0], [0, 0, 1]],\n  strikes: [[0, 0, 0], [1, 1, 0], [1, 1, 0], [0, 0, 0]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_42.svg',\n  name: 'oll_42',\n  scramble: \"L F2 R' F' R F' L' U2\",\n  solution: \"l UL'ULU2 l'\",\n  type: 'Dash',\n  subtype: 'Letter S',\n  squares: [[0, 0, 1], [0, 1, 1], [0, 1, 0]],\n  strikes: [[1, 1, 0], [0, 0, 0], [0, 0, 1], [0, 1, 1]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_43.svg',\n  name: 'oll_43',\n  scramble: \"R' F2LFL' FR U2\",\n  solution: \"r' U'RU'R'U2 r\",\n  type: 'Dash',\n  subtype: 'Letter S',\n  squares: [[1, 0, 0], [1, 1, 0], [0, 1, 0]],\n  strikes: [[0, 1, 1], [0, 1, 1], [1, 0, 0], [0, 0, 0]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_44.svg',\n  name: 'oll_44',\n  scramble: \"MU' RU2R' U' RU' R2rU\",\n  solution: \"F'L'U'LUF U FRUR'U'F'\",\n  type: 'Dash',\n  subtype: 'Letter S',\n  squares: [[1, 0, 0], [1, 1, 0], [0, 1, 0]],\n  strikes: [[0, 1, 0], [1, 1, 0], [0, 0, 1], [0, 0, 1]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_45.svg',\n  name: 'oll_45',\n  scramble: \"M' UR' U2RUR' UR2 r' U\",\n  solution: \"FRUR'U'F' U FRUR'U'F'\",\n  type: 'Dash',\n  subtype: 'Letter S',\n  squares: [[0, 0, 1], [0, 1, 1], [0, 1, 0]],\n  strikes: [[0, 1, 0], [0, 0, 1], [1, 0, 0], [1, 1, 0]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_46.svg',\n  name: 'oll_46',\n  scramble: \"B2R' URU' R' U' R2BR' BU2\",\n  solution: \"F' LF' L2ULUL' U' LF2\",\n  type: 'Dash',\n  subtype: 'Letter S',\n  squares: [[0, 1, 0], [0, 1, 1], [1, 0, 1]],\n  strikes: [[0, 0, 0], [1, 0, 0], [0, 1, 0], [1, 0, 0]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_47.svg',\n  name: 'oll_47',\n  scramble: \"l U' l' U' R2UR' BRU' R2U2\",\n  solution: \"FR' FR2U' R' U' RUR' F2\",\n  type: 'Dash',\n  subtype: 'Letter S',\n  squares: [[0, 1, 0], [1, 1, 0], [1, 0, 1]],\n  strikes: [[0, 0, 0], [1, 1, 0], [0, 1, 0], [1, 0, 0]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_48.svg',\n  name: 'oll_48',\n  scramble: \"B' U' R' U' R y URU2R' U' RU'\",\n  solution: \"(R' FRF' R' FRF') (RU R' U' RUR')\",\n  type: 'Dash',\n  subtype: 'Letter S',\n  squares: [[0, 1, 1], [1, 1, 0], [0, 0, 1]],\n  strikes: [[0, 0, 0], [0, 1, 0], [0, 1, 0], [1, 0, 1]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_49.svg',\n  name: 'oll_49',\n  scramble: \"FURUR' y' U' R' U2RUR' U'\",\n  solution: \"(LF' L' FLF' L' F) (L' U' L UL' U' L)\",\n  type: 'Dash',\n  subtype: 'Letter S',\n  squares: [[1, 1, 0], [0, 1, 1], [1, 0, 0]],\n  strikes: [[0, 0, 0], [1, 0, 1], [0, 1, 0], [0, 1, 0]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_50.svg',\n  name: 'oll_50',\n  scramble: \"LUF' U' L' ULFL'\",\n  solution: \"(L F' L' U' L U) (F U' L')\",\n  type: 'Line',\n  subtype: 'Lightning',\n  squares: [[0, 0, 1], [1, 1, 1], [1, 0, 0]],\n  strikes: [[1, 1, 0], [0, 0, 1], [0, 1, 0], [0, 0, 0]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_51.svg',\n  name: 'oll_51',\n  scramble: \"R' U' FURU' R' F' R\",\n  solution: \"(R' FRUR' U') (F' UR)\",\n  type: 'Line',\n  subtype: 'Lightning',\n  squares: [[1, 0, 0], [1, 1, 1], [0, 0, 1]],\n  strikes: [[0, 1, 1], [0, 0, 0], [0, 1, 0], [0, 0, 1]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_52.svg',\n  name: 'oll_52',\n  scramble: \"L' U' L y' LF' L' ULFL'\",\n  solution: \"(LF' L' U' LFL') y' (R' UR)\",\n  type: 'Line',\n  subtype: 'Letter L',\n  squares: [[0, 0, 0], [1, 1, 1], [1, 0, 0]],\n  strikes: [[1, 1, 0], [1, 0, 0], [0, 1, 1], [0, 0, 0]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_53.svg',\n  name: 'oll_53',\n  scramble: \"RUR' y R' FRU' R' F' R\",\n  solution: \"(R' FRUR' F' R) y (LU' L')\",\n  type: 'Line',\n  subtype: 'Letter L',\n  squares: [[0, 0, 0], [1, 1, 1], [0, 0, 1]],\n  strikes: [[0, 1, 1], [0, 0, 0], [1, 1, 0], [1, 0, 0]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_54.svg',\n  name: 'oll_54',\n  scramble: \"L' B' L U' R' U R L' B L\",\n  solution: \"(L' B' L) (R' U' RU) (L' BL)\",\n  type: 'Line',\n  subtype: 'Letter L',\n  squares: [[0, 0, 0], [1, 1, 1], [0, 0, 1]],\n  strikes: [[1, 1, 0], [1, 0, 0], [0, 1, 0], [0, 0, 1]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_55.svg',\n  name: 'oll_55',\n  scramble: \"L F L' U R U' R' LF' L' U2\",\n  solution: \"(RBR') (LUL' U') (RB' R')\",\n  type: 'Line',\n  subtype: 'Letter L',\n  squares: [[0, 0, 0], [1, 1, 1], [1, 0, 0]],\n  strikes: [[0, 1, 1], [0, 0, 1], [0, 1, 0], [1, 0, 0]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_56.svg',\n  name: 'oll_56',\n  scramble: \"(RL' BLR') U2 (RL' BLR')U'\",\n  solution: \"(RL' BLR') U2 (RL' BLR')\",\n  type: 'Dash',\n  subtype: 'Letter F',\n  squares: [[1, 0, 1], [0, 1, 1], [1, 1, 1]],\n  strikes: [[0, 1, 0], [0, 0, 0], [0, 0, 0], [0, 1, 0]]\n}, {\n  active: true,\n  category: 'OLL',\n  image: 'oll_57.svg',\n  name: 'oll_57',\n  scramble: \"F R' F' R L' U R U' R' L\",\n  solution: \"(RUR' U') r (R' URU' r')\",\n  type: 'Line',\n  subtype: 'Letter H',\n  squares: [[1, 0, 1], [1, 1, 1], [1, 0, 1]],\n  strikes: [[0, 1, 0], [0, 0, 0], [0, 1, 0], [0, 0, 0]]\n}];\nconst PLLs = [{\n  active: true,\n  category: 'PLL',\n  image: 'pll_1.png',\n  name: 'pll_1',\n  scramble: \"x' (U L' U R2 U') (L U R2 U2)\",\n  solution: \"x' (R' D R') U2 (R D' R' U2 R2)\",\n  type: 'A',\n  subtype: 'A',\n  squares: squresFull,\n  strikes: srikesNone,\n  lines: [[{\n    x: 0,\n    y: 0\n  }, {\n    x: 2,\n    y: 0\n  }, {\n    x: 2,\n    y: 2\n  }]]\n}, {\n  active: true,\n  category: 'PLL',\n  image: 'pll_2.png',\n  name: 'pll_2',\n  scramble: \"x' (U' R U' L2U) (R' U' L2 U2)\",\n  solution: \"x' (L D' L) U2 (L' D L) U2 L2\",\n  type: 'A',\n  subtype: 'A',\n  squares: squresFull,\n  strikes: srikesNone,\n  lines: [[{\n    x: 0,\n    y: 0\n  }, {\n    x: 0,\n    y: 2\n  }, {\n    x: 2,\n    y: 0\n  }]]\n}, {\n  active: true,\n  category: 'PLL',\n  image: 'pll_3.png',\n  name: 'pll_3',\n  scramble: \"x' (R U' R' D R U R' D') (R U R' D R U' R' D')\",\n  solution: \"x' (R U' R' D R U R' D') (R U R' D R U' R' D')\",\n  type: 'E',\n  subtype: 'E',\n  squares: squresFull,\n  strikes: srikesNone,\n  lines: []\n}, {\n  active: true,\n  category: 'PLL',\n  image: 'pll_4.png',\n  name: 'pll_4',\n  scramble: \"(R' URU' R2) y' (R' U' RU) (BRB' R' B2U')\",\n  solution: \"(R' URU' R2) y' (R' U' RU) (BRB' R' B2U')\",\n  type: 'E',\n  subtype: 'E',\n  squares: squresFull,\n  strikes: srikesNone,\n  lines: []\n}, {\n  active: true,\n  category: 'PLL',\n  image: 'pll_5.png',\n  name: 'pll_5',\n  scramble: \"(M2 U') (M2 U2) (M2 U') M2\",\n  solution: \"(M2 U') (M2 U2) (M2 U') M2\",\n  type: 'H',\n  subtype: 'H',\n  squares: squresFull,\n  strikes: srikesNone,\n  lines: []\n}, {\n  active: true,\n  category: 'PLL',\n  image: 'pll_6.png',\n  name: 'pll_6',\n  scramble: \"(R' UR' U') (R' U') (R' U R U R2)\",\n  solution: \"(R2 U') (R' U' RU) (R U R U' R)\",\n  type: 'U',\n  subtype: 'U',\n  squares: squresFull,\n  strikes: srikesNone,\n  lines: []\n}, {\n  active: true,\n  category: 'PLL',\n  image: 'pll_7.png',\n  name: 'pll_7',\n  scramble: \"(R2 U') (R' U' RU) (R U R U' R)\",\n  solution: \"(R' UR' U') (R' U') (R' U R U R2)\",\n  type: 'U',\n  subtype: 'U',\n  squares: squresFull,\n  strikes: srikesNone,\n  lines: []\n}, {\n  active: true,\n  category: 'PLL',\n  image: 'pll_8.png',\n  name: 'pll_8',\n  scramble: \"L U' R' UL' U2 R U' R' U2 R x2\",\n  solution: \"B2 (R' U' R) B2 (L' D L' D') L2\",\n  type: 'J',\n  subtype: 'J',\n  squares: squresFull,\n  strikes: srikesNone,\n  lines: []\n}, {\n  active: true,\n  category: 'PLL',\n  image: 'pll_9.png',\n  name: 'pll_9',\n  scramble: \"(R' U L U' R) (U2 L' U L U2 L') x2\",\n  solution: \"B2 (L U L') B2 (R D' R D) R2\",\n  type: 'J',\n  subtype: 'J',\n  squares: squresFull,\n  strikes: srikesNone,\n  lines: []\n}, {\n  active: true,\n  category: 'PLL',\n  image: 'pll_10.png',\n  name: 'pll_10',\n  scramble: \"(R U R' U') (R' F R2 U') (R' U' R U R' F')\",\n  solution: \"(R U R' U') (R' F R2 U') (R' U' R U R' F')\",\n  type: 'T',\n  subtype: 'T',\n  squares: squresFull,\n  strikes: srikesNone,\n  lines: []\n}, {\n  active: true,\n  category: 'PLL',\n  image: 'pll_11.png',\n  name: 'pll_11',\n  scramble: \"(L' U L' U') y'(R' F') (R2 U' R' U R' F R F) y\",\n  solution: \"(L' U L' U') y'(R' F') (R2 U' R' U R' F R F)\",\n  type: 'V',\n  subtype: 'V',\n  squares: squresFull,\n  strikes: srikesNone,\n  lines: []\n}, {\n  active: true,\n  category: 'PLL',\n  image: 'pll_12.png',\n  name: 'pll_12',\n  scramble: \"(L U2 L' U2) (L F' L' U' LU) (L F L2 U)\",\n  solution: \"(L U2 L' U2) (L F' L' U' LU) (L F L2 U)\",\n  type: 'R',\n  subtype: 'R',\n  squares: squresFull,\n  strikes: srikesNone,\n  lines: []\n}, {\n  active: true,\n  category: 'PLL',\n  image: 'pll_13.png',\n  name: 'pll_13',\n  scramble: \"(R' U2 R U2) (R' F R U R' U') (R' F' R2 U')\",\n  solution: \"(R' U2 R U2) (R' F R U R' U') (R' F' R2 U')\",\n  type: 'R',\n  subtype: 'R',\n  squares: squresFull,\n  strikes: srikesNone,\n  lines: []\n}, {\n  active: true,\n  category: 'PLL',\n  image: 'pll_14.png',\n  name: 'pll_14',\n  scramble: \"(L U L' B2) z' (R' U L' U' L) (U' R B2) z\",\n  solution: \"z x' (U2 r' U R' U R U' r U2) y (L F' L') x\",\n  type: 'G',\n  subtype: 'G',\n  squares: squresFull,\n  strikes: srikesNone,\n  lines: []\n}, {\n  active: true,\n  category: 'PLL',\n  image: 'pll_15.png',\n  name: 'pll_15',\n  scramble: \"(R' U' R B2) z (L U' R U R') (U r' U2) z' x\",\n  solution: \"z' x' (U2 l U' LU' L' U l' U2) y' (R' F R) x\",\n  type: 'G',\n  subtype: 'G',\n  squares: squresFull,\n  strikes: srikesNone,\n  lines: []\n}, {\n  active: true,\n  category: 'PLL',\n  image: 'pll_16.png',\n  name: 'pll_16',\n  scramble: \"z' (U2 l U' LU' L' U l' U2) y' (R' F R) x\",\n  solution: \"(R' U' R B2) z (L U' R U R') (U r' U2) z' x\",\n  type: 'G',\n  subtype: 'G',\n  squares: squresFull,\n  strikes: srikesNone,\n  lines: []\n}, {\n  active: true,\n  category: 'PLL',\n  image: 'pll_17.png',\n  name: 'pll_17',\n  scramble: \"z (U2 r' U R' U R U' r U2) y (L F' L') x\",\n  solution: \"(L U L' B2) z' (R' U L' U' L) (U' R B2) z\",\n  type: 'G',\n  subtype: 'G',\n  squares: squresFull,\n  strikes: srikesNone,\n  lines: []\n}, {\n  active: true,\n  category: 'PLL',\n  image: 'pll_18.png',\n  name: 'pll_18',\n  scramble: \"(U R' U' R U') (R U R U' R' U) (R U R2 U' R' U)\",\n  solution: \"(U R' U' R U') (R U R U' R' U) (R U R2 U' R' U)\",\n  type: 'Z',\n  subtype: 'Z',\n  squares: squresFull,\n  strikes: srikesNone,\n  lines: []\n}, {\n  active: true,\n  category: 'PLL',\n  image: 'pll_19.png',\n  name: 'pll_19',\n  scramble: \"L U' R U2 L' U R') (L U' R U2 L' U R') U'\",\n  solution: \"L U' R U2 L' U R') (L U' R U2 L' U R') U'\",\n  type: 'N',\n  subtype: 'N',\n  squares: squresFull,\n  strikes: srikesNone,\n  lines: []\n}, {\n  active: true,\n  category: 'PLL',\n  image: 'pll_20.png',\n  name: 'pll_20',\n  scramble: \"(R' UL' U2 R U' L) (R' UL' U2 R U' L) U\",\n  solution: \"(R' UL' U2 R U' L) (R' UL' U2 R U' L) U\",\n  type: 'N',\n  subtype: 'N',\n  squares: squresFull,\n  strikes: srikesNone,\n  lines: []\n}, {\n  active: true,\n  category: 'PLL',\n  image: 'pll_21.png',\n  name: 'pll_21',\n  scramble: \"(F R U' R' U' R U R' F') (R U R' U') (R' F R F')\",\n  solution: \"(F R U' R' U' R U R' F') (R U R' U') (R' F R F')\",\n  type: 'Y',\n  subtype: 'Y',\n  squares: squresFull,\n  strikes: srikesNone,\n  lines: []\n}];\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"main.js\":function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// server/main.js                                                                                            //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nimport { Meteor } from 'meteor/meteor';\n\nimport { createAlgorithms } from './algorithmsCreation';\n\nMeteor.startup(() => {\n  //UniConfig.private.runOnce('createAlgorithms', createAlgorithms);\n  createAlgorithms();\n});\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"collections\":{\"algorithms.js\":function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// collections/algorithms.js                                                                                 //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nimport { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { check } from 'meteor/check';\n\nimport { expect } from 'chai';\n\nexport const Algorithms = new Mongo.Collection('algorithms');\n\nMeteor.methods({\n  'algorithms.toggleActive': (algId, active) => {\n    check(active, Boolean);\n    check(algId, String);\n\n    Algorithms.update(algId, { $set: { active } });\n  },\n  'algorithms.activateAll': category => {\n    Algorithms.update(\n      { category },\n      { $set: { active: true } },\n      { multi: true }\n    );\n  },\n  'algorithms.deactivateAll': category => {\n    Algorithms.update(\n      { category },\n      { $set: { active: false } },\n      { multi: true }\n    );\n  },\n  'algorithms.insert': ({\n    category,\n    image,\n    scramble,\n    solution,\n    subtype,\n    type\n  }) => {\n    expect(category).to.be.a('string');\n    expect(image).to.be.a('string');\n    expect(scramble).to.be.a('string');\n    expect(solution).to.be.a('string');\n    expect(subtype).to.be.a('string');\n    expect(type).to.be.a('string');\n\n    // Make sure the user is logged in before inserting a algorithm\n    /* if (! Meteor.userId()) {\n         throw new Meteor.Error('not-authorized');\n     }*/\n\n    const doc = {\n      createdAt: new Date(),\n      category,\n      image,\n      scramble,\n      solution,\n      subtype,\n      type\n    };\n\n    Algorithms.insert(doc);\n  },\n  'algorithms.search'(text) {\n    check(text, String);\n\n    return Algorithms.find();\n  },\n  'algorithms.remove'(algorithmId) {\n    check(algorithmId, String);\n\n    /*const algorithm = Algorithms.findOne(algorithmId);\n    if (algorithm.private && algorithm.owner !== Meteor.userId()) {\n      // If the algorithm is private, make sure only the owner can delete it\n          throw new Meteor.Error('not-authorized');\n    }*/\n\n    Algorithms.remove(algorithmId);\n  } /*,\n    'algorithms.setChecked'(algorithmId, setChecked) {\n        check(algorithmId, String);\n        check(setChecked, Boolean);\n\n        const algorithm = Algorithms.findOne(algorithmId);\n        if (algorithm.private && algorithm.owner !== Meteor.userId()) {\n              // If the algorithm is private, make sure only the owner can check it off\n                  throw new Meteor.Error('not-authorized');\n            }\n\n        Algorithms.update(algorithmId, { $set: { checked: setChecked } });\n    },\n    'algorithms.setPrivate'(algorithmId, setToPrivate) {\n        check(algorithmId, String);\n        check(setToPrivate, Boolean);\n\n        const algorithm = Algorithms.findOne(algorithmId);\n\n        // Make sure only the algorithm owner can make a algorithm private\n        if (algorithm.owner !== Meteor.userId()) {\n            throw new Meteor.Error('not-authorized');\n        }\n\n        Algorithms.update(algorithmId, { $set: { private: setToPrivate } });\n    },*/\n});\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"results.js\":function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// collections/results.js                                                                                    //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nimport { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { check } from 'meteor/check';\n\nexport const Results = new Mongo.Collection('results');\n\nMeteor.methods({\n  'results.insert': ({ algorithmId, category, real, scramble, time }) => {\n    check(category, String);\n    check(real, Boolean);\n    check(time, Number);\n\n    if (category === 'OLL' || category === 'PLL' || category === '3x3x3') {\n      check(scramble, String);\n    }\n\n    if (category === 'OLL' || category === 'PLL') {\n      check(algorithmId, String);\n    }\n\n    // Make sure the user is logged in before inserting a result\n    /* if (! Meteor.userId()) {\n     throw new Meteor.Error('not-authorized');\n     }*/\n\n    const doc = {\n      algorithmId,\n      category,\n      createdAt: new Date(),\n      real,\n      scramble,\n      time\n    };\n\n    Results.insert(doc);\n  },\n  'results.search': text => {\n    check(text, String);\n\n    return Results.find();\n  },\n  'results.remove': resultId => {\n    check(resultId, String);\n\n    /*const result = Results.findOne(resultId);\n     if (result.private && result.owner !== Meteor.userId()) {\n     // If the result is private, make sure only the owner can delete it\n     throw new Meteor.Error('not-authorized');\n     }*/\n\n    Results.remove(resultId);\n  }\n});\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"generateSVGs.ts\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// generateSVGs.ts                                                                                           //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nlet fs;\nmodule.link(\"fs\", {\n  \"*\"(v) {\n    fs = v;\n  }\n\n}, 0);\nlet OLLs, PLLs;\nmodule.link(\"./server/const\", {\n  OLLs(v) {\n    OLLs = v;\n  },\n\n  PLLs(v) {\n    PLLs = v;\n  }\n\n}, 1);\nconst filesPath = 'public/images/';\n\nconst getSVGcontent = function (_ref, squareLength) {\n  let {\n    squares,\n    strikes,\n    lines = []\n  } = _ref;\n  let spacingLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : squareLength / 10;\n  const cubeSize = squares[0].length;\n  console.log('lines', lines);\n  const colorPrimary = '#ffff45';\n  const colorSecondary = 'gray';\n  const colorBackground = 'black';\n  const squaresFormatted = squares.map((row, rowIndex) => row.map((face, columnIndex) => ({\n    x: spacingLength * 2 + columnIndex * (squareLength + spacingLength),\n    y: spacingLength * 2 + rowIndex * (squareLength + spacingLength),\n    width: squareLength,\n    height: squareLength,\n    fill: face ? colorPrimary : colorSecondary,\n    stroke: colorBackground,\n    strokeWidth: spacingLength\n  })));\n\n  const getStrikePosition = index => {\n    if (index === 0) {\n      return 0.5 * spacingLength;\n    }\n\n    if (index - 1 === cubeSize) {\n      return 1.5 * spacingLength + (index - 1) * (spacingLength + squareLength);\n    }\n\n    return spacingLength * 2 + (index - 1) * (spacingLength + squareLength);\n  };\n\n  const strikesTop = strikes[0] ? strikes[0].map((strike, strikeIndex) => ({\n    x: getStrikePosition(strikeIndex + 1),\n    y: getStrikePosition(0),\n    width: squareLength,\n    height: spacingLength,\n    fill: strike ? colorPrimary : ''\n  })) : [];\n  const strikesRight = strikes[1] ? strikes[1].map((strike, strikeIndex) => ({\n    x: getStrikePosition(cubeSize + 1),\n    y: getStrikePosition(strikeIndex + 1),\n    width: spacingLength,\n    height: squareLength,\n    fill: strike ? colorPrimary : ''\n  })) : [];\n  const strikesBottom = strikes[2] ? strikes[2].map((strike, strikeIndex) => ({\n    x: getStrikePosition(strikeIndex + 1),\n    y: getStrikePosition(cubeSize + 1),\n    width: squareLength,\n    height: spacingLength,\n    fill: strike ? colorPrimary : ''\n  })) : [];\n  const strikesLeft = strikes[3] ? strikes[3].map((strike, strikeIndex) => ({\n    x: getStrikePosition(0),\n    y: getStrikePosition(strikeIndex + 1),\n    width: spacingLength,\n    height: squareLength,\n    fill: strike ? colorPrimary : ''\n  })) : [];\n  const strikesFormatted = [strikesTop, strikesRight, strikesBottom, strikesLeft];\n\n  const getCenter = (_ref2) => {\n    let {\n      x: squareX,\n      y: squareY\n    } = _ref2;\n    const x = 2 * spacingLength + 0.5 * squareLength + (spacingLength + squareLength) * squareX;\n    const y = 2 * spacingLength + 0.5 * squareLength + (spacingLength + squareLength) * squareY;\n    return {\n      x,\n      y\n    };\n  };\n\n  const getPoints = line => line.map(point => getCenter(point));\n\n  const lineToMarker = (pointA, pointB) => {\n    const pointC = {\n      x: pointA.x + Math.abs(pointB.x - pointA.x),\n      y: pointA.y\n    };\n    const rotationAngle = Math.atan2(pointB.y - pointA.y, pointB.x - pointA.x) * 180 / Math.PI - Math.atan2(pointC.y - pointA.y, pointC.x - pointA.x);\n    const leftBackPoint = {\n      x: pointB.x - 0.25 * squareLength,\n      y: pointB.y - 0.25 * squareLength\n    };\n    const rightBackPoint = {\n      x: pointB.x - 0.25 * squareLength,\n      y: pointB.y + 0.25 * squareLength\n    };\n    console.log('pointA', pointA);\n    console.log('pointB', pointB);\n    console.log('leftBackPoint', leftBackPoint);\n    console.log('rightBackPoint', rightBackPoint);\n    return {\n      points: [leftBackPoint, pointB, rightBackPoint],\n      angle: rotationAngle\n    };\n  };\n\n  const getMarkers = line => {\n    const markers = [];\n\n    for (let i = 0; i < line.length; i++) {\n      if (i > 0) {\n        markers.push(lineToMarker(line[i - 1], line[i]));\n      }\n    }\n\n    markers.push(lineToMarker(line[line.length - 1], line[0]));\n    return markers;\n  };\n\n  const linesFormatted = lines.map(line => getPoints(line));\n  const boardSize = spacingLength * 3 + cubeSize * (squareLength + spacingLength);\n  const content = \"\\n    <svg \\n      xmlns=\\\"http://www.w3.org/2000/svg\\\" \\n      width=\\\"\".concat(boardSize, \"\\\"\\n      height=\\\"\").concat(boardSize, \"\\\"\\n    >\\n      <!-- BACKGROUND -->\\n      <rect \\n        width=\\\"\").concat(boardSize, \"\\\"\\n        height=\\\"\").concat(boardSize, \"\\\"\\n        fill=\\\"\").concat(colorBackground, \"\\\"  \\n      />\\n      \\n      <!-- SQUARES -->\\n      \").concat(squaresFormatted.map(row => row.map(square => \"\\n                <rect \\n                  x=\\\"\".concat(square.x, \"\\\" \\n                  y=\\\"\").concat(square.y, \"\\\" \\n                  width=\\\"\").concat(square.width, \"\\\"\\n                  height=\\\"\").concat(square.height, \"\\\"\\n                  fill=\\\"\").concat(square.fill, \"\\\"\\n                />\\n              \")).join('')).join(''), \"\\n      \\n          \\n      <!-- STRIKES -->\\n      \").concat(strikesFormatted.map(strikeGroup => strikeGroup.filter(strike => strike.fill).map(strike => \"\\n                <rect \\n                  x=\\\"\".concat(strike.x, \"\\\" \\n                  y=\\\"\").concat(strike.y, \"\\\" \\n                  width=\\\"\").concat(strike.width, \"\\\"\\n                  height=\\\"\").concat(strike.height, \"\\\"\\n                  fill=\\\"\").concat(strike.fill, \"\\\"\\n                />\\n              \")).join('')).join(''), \"\\n      \\n      <!-- LINES -->\\n      \").concat(linesFormatted.map(line => \"\\n          <polyline \\n          points=\\\"\".concat(line.reduce((points, point) => \"\".concat(points, \" \").concat(point.x, \",\").concat(point.y), '') + \" \".concat(line[0].x, \",\").concat(line[0].y), \"\\\" \\n          fill=\\\"none\\\" \\n          stroke=\\\"orange\\\" \\n          stroke-width=\\\"3\\\"\\n          />\\n        \")), \"\\n      \\n      <!-- MARKERS -->\\n      \").concat(linesFormatted.map(line => getMarkers(line).map((_ref3) => {\n    let {\n      points,\n      angle\n    } = _ref3;\n    return \"\\n                <polygon \\n                  points=\\\"\".concat(points.reduce((points, point) => \"\".concat(points, \" \").concat(point.x, \",\").concat(point.y), ''), \"\\\"\\n                  fill=\\\"red\\\" \\n                  transform=\\\"\\n                  translate(\").concat(points[1].x, \" \").concat(points[1].y, \") \\n                  rotate(\").concat(angle, \" 0 0) \\n                  translate(\").concat(-1 * points[1].x, \" \").concat(-1 * points[1].y, \")\\\"\\n                />\\n              \");\n  }).join('')).join(''), \"\\n    </svg>\\n  \");\n  return content;\n};\n\nconst writeFile = (path, name, extension, content) => {\n  return new Promise(resolve => {\n    fs.writeFile(\"\".concat(path).concat(name).concat(extension), content, err => {\n      if (err) {\n        throw err;\n      }\n\n      resolve(\"File \".concat(name, \" created successfully\"));\n    });\n  });\n};\n/* write files */\n\n\nOLLs.filter(OLL => OLL.squares).forEach(scramble => Promise.asyncApply(() => {\n  const content = getSVGcontent(scramble, 25, 3);\n  const result = Promise.await(writeFile(filesPath, scramble.name, '.svg', content));\n  console.info(result);\n}));\nPLLs.filter(PLL => PLL.lines && PLL.lines.length).forEach(scramble => Promise.asyncApply(() => {\n  const content = getSVGcontent(scramble, 25, 3);\n  const result = Promise.await(writeFile(filesPath, scramble.name, '.svg', content));\n  console.info(result);\n}));\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},{\n  \"extensions\": [\n    \".js\",\n    \".json\",\n    \".ts\",\n    \".tsx\"\n  ]\n});\n\nrequire(\"/lib/global-helpers.js\");\nrequire(\"/server/publications/algorithms.js\");\nrequire(\"/server/publications/results.js\");\nrequire(\"/collections/algorithms.js\");\nrequire(\"/collections/results.js\");\nrequire(\"/server/algorithmsCreation.js\");\nrequire(\"/server/const.ts\");\nrequire(\"/generateSVGs.ts\");\nrequire(\"/server/main.js\");","hash":"9a828e0b0c6aa3767ba91b4f2b333a50eae41bf9","servePath":"/app.js","sourceMap":{"version":3,"sources":["server/const.ts","generateSVGs.ts"],"names":[],"mappings":"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","file":"/app.js","sourcesContent":["export type algorithm = {\n  active: boolean;\n  category: 'OLL' | 'PLL';\n  name: string;\n  image: string;\n  scramble: string;\n  solution: string;\n  type: string;\n  subtype: string;\n  squares: squaresType;\n  strikes: strikesType;\n  lines?: line[];\n};\n\nexport type line = point[];\nexport type point = { x: number; y: number };\n\ntype squaresType = [\n  [0 | 1, 0 | 1, 0 | 1], // top row, left to right\n  [0 | 1, 0 | 1, 0 | 1], // middle row, left to right\n  [0 | 1, 0 | 1, 0 | 1] // bottom row, left to right\n];\n\ntype strikesType =\n  | [\n      [0 | 1, 0 | 1, 0 | 1], // top group, left to right\n      [0 | 1, 0 | 1, 0 | 1], // right group, top to bottom\n      [0 | 1, 0 | 1, 0 | 1], // bottom group, left to right\n      [0 | 1, 0 | 1, 0 | 1] // left group, top to bottom\n    ]\n  | [];\n\nconst squresFull: squaresType = [/* eslint-disable-line */\n  [1, 1, 1],\n  [1, 1, 1],\n  [1, 1, 1]\n];\n\nconst srikesNone: strikesType = [];\n\nexport const OLLs: algorithm[] = [\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_1.svg',\n    name: 'oll_1',\n    scramble: \"RU2 R' U' RUR' U' RU' R' U'\",\n    solution: \"RU2 R' U' RUR' U' RU' R'\",\n    type: 'Cross',\n    subtype: 'Cross',\n    squares: [/* eslint-disable-line */\n      [0, 1, 0],\n      [1, 1, 1],\n      [0, 1, 0]\n    ],\n    strikes: [[1, 0, 1], [0, 0, 0], [1, 0, 1], [0, 0, 0]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_2.svg',\n    name: 'oll_2',\n    scramble: \"RU2 R2 U' R2U' R2U2R\",\n    solution: \"(RU2 R2 U') (R2U') (R2U2R)\",\n    type: 'Cross',\n    subtype: 'Cross',\n    squares: [/* eslint-disable-line */\n      [0, 1, 0],\n      [1, 1, 1],\n      [0, 1, 0]\n    ],\n    strikes: [[0, 0, 1], [0, 0, 0], [0, 0, 1], [1, 0, 1]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_3.svg',\n    name: 'oll_3',\n    scramble: \"x' (RUR' DRU' R' D' F)\",\n    solution: \"x' (RU' R' DRUR' D')\",\n    type: 'Cross',\n    subtype: 'Cross',\n    squares: [/* eslint-disable-line */\n      [0, 1, 1],\n      [1, 1, 1],\n      [1, 1, 0]\n    ],\n    strikes: [[1, 0, 0], [0, 0, 1], [0, 0, 0], [0, 0, 0]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_4.svg',\n    name: 'oll_4',\n    scramble: \"RU2RDR' U2RD' R2 U2\",\n    solution: \"R2D' RU2R'DRU2R\",\n    type: 'Cross',\n    subtype: 'Cross',\n    squares: [/* eslint-disable-line */\n      [0, 1, 0],\n      [1, 1, 1],\n      [1, 1, 1]\n    ],\n    strikes: [[1, 0, 1], [0, 0, 0], [0, 0, 0], [0, 0, 0]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_5.svg',\n    name: 'oll_5',\n    scramble: \"x' (RU' R' DRUR' D')\",\n    solution: \"x' (RUR' DRU' R' D')\",\n    type: 'Cross',\n    subtype: 'Cross',\n    squares: [/* eslint-disable-line */\n      [1, 1, 1],\n      [1, 1, 1],\n      [0, 1, 0]\n    ],\n    strikes: [[0, 0, 0], [0, 0, 1], [0, 0, 0], [0, 0, 1]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_6.svg',\n    name: 'oll_6',\n    scramble: \"RUR' URU2R' U\",\n    solution: \"L' U' LU' L' U2L\",\n    type: 'Cross',\n    subtype: 'Cross',\n    squares: [/* eslint-disable-line */\n      [0, 1, 0],\n      [1, 1, 1],\n      [0, 1, 1]\n    ],\n    strikes: [[0, 0, 1], [0, 0, 0], [1, 0, 0], [1, 0, 0]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_7.svg',\n    name: 'oll_7',\n    scramble: \"L' U' LU' L' U2LU'\",\n    solution: \"RUR' URU2R'\",\n    type: 'Cross',\n    subtype: 'Cross',\n    squares: [/* eslint-disable-line */\n      [0, 1, 0],\n      [1, 1, 1],\n      [1, 1, 0]\n    ],\n    strikes: [[1, 0, 0], [1, 0, 0], [0, 0, 1], [0, 0, 0]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_8.svg',\n    name: 'oll_8',\n    scramble: \"FR' F' RUR2B' R' BU' R'\",\n    solution: \"(RU2R2FR) (F' U2R' FRF')\",\n    type: 'Dot',\n    subtype: 'Dot',\n    squares: [/* eslint-disable-line */\n      [0, 0, 0],\n      [0, 1, 0],\n      [0, 0, 0]\n    ],\n    strikes: [[0, 1, 0], [1, 1, 1], [0, 1, 0], [1, 1, 1]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_9.svg',\n    name: 'oll_9',\n    scramble: \"FR' F' RU2FR' F' RU' RU' R' U2\",\n    solution: \"LF' L' FU2FU' RU' R' F'\",\n    type: 'Dot',\n    subtype: 'Dot',\n    squares: [/* eslint-disable-line */\n      [1, 0, 0],\n      [0, 1, 0],\n      [0, 0, 1]\n    ],\n    strikes: [[0, 1, 0], [1, 1, 0], [1, 1, 0], [0, 1, 0]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_10.svg',\n    name: 'oll_10',\n    scramble: \"FR' F' RU2R d' RU' R' F' U'\",\n    solution: \"(RU2R2FRF' U2) M' URU' L'\",\n    type: 'Dot',\n    subtype: 'Dot',\n    squares: [/* eslint-disable-line */\n      [0, 0, 1],\n      [0, 1, 0],\n      [0, 0, 1]\n    ],\n    strikes: [[0, 1, 0], [0, 1, 0], [0, 1, 0], [1, 1, 1]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_11.svg',\n    name: 'oll_11',\n    scramble: \"RU2R2FRF' U2R' FRF' U2\",\n    solution: \"(FRUR' U' F') (fRUR' U' f')\",\n    type: 'Dot',\n    subtype: 'Dot',\n    squares: [/* eslint-disable-line */\n      [0, 0, 0],\n      [0, 1, 0],\n      [0, 0, 0]\n    ],\n    strikes: [[0, 1, 1], [0, 1, 0], [0, 1, 1], [1, 1, 1]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_12.svg',\n    name: 'oll_12',\n    scramble: \"R' F' U2F2URU' R' F' U2R\",\n    solution: \"R' U2FRUR' U' F2U2FR\",\n    type: 'Dot',\n    subtype: 'Dot',\n    squares: [/* eslint-disable-line */\n      [1, 0, 1],\n      [0, 1, 0],\n      [0, 0, 0]\n    ],\n    strikes: [[0, 1, 0], [0, 1, 1], [0, 1, 0], [0, 1, 1]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_13.svg',\n    name: 'oll_13',\n    scramble: \"MU' LF2L' U' RU' R2 r\",\n    solution: \"MUR' F2RUL' U L2 l'\",\n    type: 'Dot',\n    subtype: 'Dot',\n    squares: [/* eslint-disable-line */\n      [0, 0, 0],\n      [0, 1, 0],\n      [1, 0, 0]\n    ],\n    strikes: [[1, 1, 0], [1, 1, 0], [0, 1, 1], [0, 1, 0]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_14.svg',\n    name: 'oll_14',\n    scramble: \"MUR' F2RUL' U L2 l'\",\n    solution: \"MU' LF2L' U' RU' R2 r\",\n    type: 'Dot',\n    subtype: 'Dot',\n    squares: [/* eslint-disable-line */\n      [0, 0, 0],\n      [0, 1, 0],\n      [0, 0, 1]\n    ],\n    strikes: [[0, 1, 1], [0, 1, 0], [1, 1, 0], [1, 1, 0]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_15.svg',\n    name: 'oll_15',\n    scramble: \"(MUMUMUMU) (M' UM' UM' UM' U)\",\n    solution: \"M (URUR' U') M2 (U RU' r')\",\n    type: 'Dot',\n    subtype: 'Letter X',\n    squares: [/* eslint-disable-line */\n      [1, 0, 1],\n      [0, 1, 0],\n      [1, 0, 1]\n    ],\n    strikes: [[0, 1, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_16.svg',\n    name: 'oll_16',\n    scramble: \"(R' FRUR' U') (F' UR)\",\n    solution: \"R' U' FURU' R' F' R\",\n    type: 'Dash',\n    subtype: 'Letter P',\n    squares: [/* eslint-disable-line */\n      [0, 1, 1],\n      [0, 1, 1],\n      [0, 0, 1]\n    ],\n    strikes: [[1, 0, 0], [0, 0, 0], [1, 1, 0], [0, 1, 0]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_17.svg',\n    name: 'oll_17',\n    scramble: \"(L F' L' U' L U) (F U' L')\",\n    solution: \"LUF' U' L' ULFL'\",\n    type: 'Dash',\n    subtype: 'Letter P',\n    squares: [/* eslint-disable-line */\n      [1, 1, 0],\n      [1, 1, 0],\n      [1, 0, 0]\n    ],\n    strikes: [[0, 0, 1], [0, 1, 0], [0, 1, 1], [0, 0, 0]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_18.svg',\n    name: 'oll_18',\n    scramble: \"F (RUR' U') F'\",\n    solution: \"FURU' R' F'\",\n    type: 'Dash',\n    subtype: 'Letter P',\n    squares: [/* eslint-disable-line */\n      [1, 1, 0],\n      [1, 1, 0],\n      [1, 0, 0]\n    ],\n    strikes: [[0, 0, 0], [1, 1, 1], [0, 1, 0], [0, 0, 0]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_19.svg',\n    name: 'oll_19',\n    scramble: \"F' (L' U' LU) F\",\n    solution: \"F' U' L' ULF\",\n    type: 'Dash',\n    subtype: 'Letter P',\n    squares: [/* eslint-disable-line */\n      [0, 1, 1],\n      [0, 1, 1],\n      [0, 0, 1]\n    ],\n    strikes: [[0, 0, 0], [0, 0, 0], [0, 1, 0], [1, 1, 1]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_20.svg',\n    name: 'oll_20',\n    scramble: \"B' RBR' U' R' U' RUR' URU2\",\n    solution: \"(L' U' LU' L' U) (LULF' L' F)\",\n    type: 'Dash',\n    subtype: 'Letter W',\n    squares: [/* eslint-disable-line */\n      [1, 1, 0],\n      [0, 1, 1],\n      [0, 0, 1]\n    ],\n    strikes: [[0, 0, 1], [0, 0, 0], [0, 1, 0], [0, 1, 1]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_21.svg',\n    name: 'oll_21',\n    scramble: \"FR' F' RURUR' U' RU' R'\",\n    solution: \"(RUR' URU') (R' U' R' FRF')\",\n    type: 'Dash',\n    subtype: 'Letter W',\n    squares: [/* eslint-disable-line */\n      [0, 1, 1],\n      [1, 1, 0],\n      [1, 0, 0]\n    ],\n    strikes: [[1, 0, 0], [0, 1, 1], [0, 1, 0], [0, 0, 0]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_22.svg',\n    name: 'oll_22',\n    scramble: \"R' F' LF' L' FLF' L' F2RU'\",\n    solution: \"(R' F' LF') ( L' FLF' L' F2R)\",\n    type: 'Dash',\n    subtype: 'Dash',\n    squares: [/* eslint-disable-line */\n      [0, 1, 0],\n      [1, 1, 0],\n      [0, 0, 0]\n    ],\n    strikes: [[0, 0, 0], [1, 1, 1], [0, 1, 0], [1, 0, 1]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_23.svg',\n    name: 'oll_23',\n    scramble: \"LFR' FRF' R' FRF2L' U\",\n    solution: \"LFR' FRF' R' FRF2L'\",\n    type: 'Dash',\n    subtype: 'Dash',\n    squares: [/* eslint-disable-line */\n      [0, 1, 0],\n      [0, 1, 1],\n      [0, 0, 0]\n    ],\n    strikes: [[0, 0, 0], [1, 0, 1], [0, 1, 0], [1, 1, 1]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_24.svg',\n    name: 'oll_24',\n    scramble: \"F' U' L' ULU' L' ULF\",\n    solution: \"F' (L' U' LU) (L' U' LU) F\",\n    type: 'Dash',\n    subtype: 'Dash',\n    squares: [/* eslint-disable-line */\n      [0, 1, 0],\n      [0, 1, 1],\n      [0, 0, 0]\n    ],\n    strikes: [[1, 0, 0], [1, 0, 1], [1, 1, 0], [0, 1, 0]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_25.svg',\n    name: 'oll_25',\n    scramble: \"F URU' R' URU' R' F'\",\n    solution: \"F (RUR' U') (RUR' U') F'\",\n    type: 'Dash',\n    subtype: 'Dash',\n    squares: [/* eslint-disable-line */\n      [0, 1, 0],\n      [1, 1, 0],\n      [0, 0, 0]\n    ],\n    strikes: [[0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 1]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_26.svg',\n    name: 'oll_26',\n    scramble: \"(r U') (r2 U) (r2 U r2 U' r)\",\n    solution: \"(r' U) (r2U') (r2U') (r2Ur')\",\n    type: 'Dash',\n    subtype: 'Dash',\n    squares: [/* eslint-disable-line */\n      [0, 0, 0],\n      [0, 1, 1],\n      [0, 1, 0]\n    ],\n    strikes: [[0, 1, 1], [0, 0, 0], [0, 0, 1], [1, 1, 1]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_27.svg',\n    name: 'oll_27',\n    scramble: \"(r' U) (r2U') (r2U') (r2Ur')U2\",\n    solution: \"(lU') (l2U) (l2U) (l2U' l)\",\n    type: 'Dash',\n    subtype: 'Dash',\n    squares: [/* eslint-disable-line */\n      [0, 0, 0],\n      [1, 1, 0],\n      [0, 1, 0]\n    ],\n    strikes: [[1, 1, 0], [1, 1, 1], [1, 0, 0], [0, 0, 0]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_28.svg',\n    name: 'oll_28',\n    scramble: \"L F' L' U' L F L' y L' U L\",\n    solution: \"L' U' L y' LF' L' ULFL'\",\n    type: 'Dash',\n    subtype: 'Dash',\n    squares: [/* eslint-disable-line */\n      [1, 0, 0],\n      [0, 1, 1],\n      [0, 1, 0]\n    ],\n    strikes: [[0, 1, 1], [0, 0, 1], [1, 0, 0], [0, 1, 0]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_29.svg',\n    name: 'oll_29',\n    scramble: \"R' F R U R' F' R y' R U' R'\",\n    solution: \"RUR' y R' FRU' R' F' R\",\n    type: 'Dash',\n    subtype: 'Dash',\n    squares: [/* eslint-disable-line */\n      [0, 0, 1],\n      [1, 1, 0],\n      [0, 1, 0]\n    ],\n    strikes: [[1, 1, 0], [0, 1, 0], [0, 0, 1], [0, 0, 1]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_30.svg',\n    name: 'oll_30',\n    scramble: \"B' FR' F' RBURU' R' U2\",\n    solution: \"(R' U' RU F) x' (R U' R' UD')\",\n    type: 'Line',\n    subtype: 'Letter C',\n    squares: [/* eslint-disable-line */\n      [1, 0, 1],\n      [1, 1, 1],\n      [0, 0, 0]\n    ],\n    strikes: [[0, 1, 0], [0, 0, 1], [0, 1, 0], [0, 0, 1]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_31.svg',\n    name: 'oll_31',\n    scramble: \"RUB' RBR' U' R'\",\n    solution: \"(R' U' R' F) (RF' U) R\",\n    type: 'Line',\n    subtype: 'Letter C',\n    squares: [/* eslint-disable-line */\n      [1, 1, 0],\n      [0, 1, 0],\n      [1, 1, 0]\n    ],\n    strikes: [[0, 0, 0], [1, 1, 1], [0, 0, 0], [0, 1, 0]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_32.svg',\n    name: 'oll_32',\n    scramble: \"FR' F' RURU' R'\",\n    solution: \"(RUR' U') (R' FRF')\",\n    type: 'Line',\n    subtype: 'Letter T',\n    squares: [/* eslint-disable-line */\n      [0, 0, 1],\n      [1, 1, 1],\n      [0, 0, 1]\n    ],\n    strikes: [[1, 1, 0], [0, 0, 0], [1, 1, 0], [0, 0, 0]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_33.svg',\n    name: 'oll_33',\n    scramble: \"FURU' R' F'\",\n    solution: \"F (RUR' U') F'\",\n    type: 'Line',\n    subtype: 'Letter T',\n    squares: [/* eslint-disable-line */\n      [0, 0, 1],\n      [1, 1, 1],\n      [0, 0, 1]\n    ],\n    strikes: [[0, 1, 0], [0, 0, 0], [0, 1, 0], [1, 0, 1]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_34.svg',\n    name: 'oll_34',\n    scramble: \"B' RBU2R' U' RU' R2U2R\",\n    solution: \"(RU2R2U' RU' R' U2) (F R F')\",\n    type: 'Line',\n    subtype: 'Letter I',\n    squares: [/* eslint-disable-line */\n      [0, 1, 0],\n      [0, 1, 0],\n      [0, 1, 0]\n    ],\n    strikes: [[0, 0, 0], [1, 1, 1], [0, 0, 0], [1, 1, 1]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_35.svg',\n    name: 'oll_35',\n    scramble: \"F (RUR' U') (RUR' U') F'\",\n    solution: \"F (URU' R' URU' R') F'\",\n    type: 'Line',\n    subtype: 'Letter I',\n    squares: [/* eslint-disable-line */\n      [0, 0, 0],\n      [1, 1, 1],\n      [0, 0, 0]\n    ],\n    strikes: [[1, 1, 0], [1, 0, 1], [1, 1, 0], [0, 0, 0]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_36.svg',\n    name: 'oll_36',\n    scramble: \"L' B' LR' U' RUR' U' RUL' BL\",\n    solution: \"(L' B' LU') (R' URU' R' URL' BL)\",\n    type: 'Line',\n    subtype: 'Letter I',\n    squares: [/* eslint-disable-line */\n      [0, 0, 0],\n      [1, 1, 1],\n      [0, 0, 0]\n    ],\n    strikes: [[0, 1, 0], [1, 0, 1], [0, 1, 0], [1, 0, 1]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_37.svg',\n    name: 'oll_37',\n    scramble: \"(R' U' RU' R' U) y' (R' URB)U'\",\n    solution: \"(R' U' RU' R' U) y' (R' URB)\",\n    type: 'Line',\n    subtype: 'Letter I',\n    squares: [/* eslint-disable-line */\n      [0, 1, 0],\n      [0, 1, 0],\n      [0, 1, 0]\n    ],\n    strikes: [[1, 0, 0], [1, 1, 1], [1, 0, 0], [0, 1, 0]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_38.svg',\n    name: 'oll_38',\n    scramble: \"R' F' LF' L' F2R U2\",\n    solution: \"r' U2RUR'U r\",\n    type: 'Dash',\n    subtype: 'Square',\n    squares: [/* eslint-disable-line */\n      [0, 0, 0],\n      [0, 1, 1],\n      [0, 1, 1]\n    ],\n    strikes: [[1, 1, 0], [1, 0, 0], [0, 0, 0], [0, 1, 1]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_39.svg',\n    name: 'oll_39',\n    scramble: \"LFR' FRF2L' U2\",\n    solution: \"l U2L'U'LU' l'\",\n    type: 'Dash',\n    subtype: 'Square',\n    squares: [/* eslint-disable-line */\n      [0, 0, 0],\n      [1, 1, 0],\n      [1, 1, 0]\n    ],\n    strikes: [[0, 1, 1], [0, 1, 1], [0, 0, 0], [1, 0, 0]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_40.svg',\n    name: 'oll_40',\n    scramble: \"R' U2 l U' RUR' l' U2R\",\n    solution: \"x' (R' F2R2U' R' UR' F2R)\",\n    type: 'Dash',\n    subtype: 'Square',\n    squares: [/* eslint-disable-line */\n      [0, 1, 1],\n      [0, 1, 1],\n      [1, 0, 0]\n    ],\n    strikes: [[1, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 0]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_41.svg',\n    name: 'oll_41',\n    scramble: \"(RUR' U') (R' FRF')\",\n    solution: \"FR' F' RURU' R'\",\n    type: 'Dash',\n    subtype: 'Square',\n    squares: [/* eslint-disable-line */\n      [1, 1, 0],\n      [1, 1, 0],\n      [0, 0, 1]\n    ],\n    strikes: [[0, 0, 0], [1, 1, 0], [1, 1, 0], [0, 0, 0]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_42.svg',\n    name: 'oll_42',\n    scramble: \"L F2 R' F' R F' L' U2\",\n    solution: \"l UL'ULU2 l'\",\n    type: 'Dash',\n    subtype: 'Letter S',\n    squares: [/* eslint-disable-line */\n      [0, 0, 1],\n      [0, 1, 1],\n      [0, 1, 0]\n    ],\n    strikes: [[1, 1, 0], [0, 0, 0], [0, 0, 1], [0, 1, 1]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_43.svg',\n    name: 'oll_43',\n    scramble: \"R' F2LFL' FR U2\",\n    solution: \"r' U'RU'R'U2 r\",\n    type: 'Dash',\n    subtype: 'Letter S',\n    squares: [/* eslint-disable-line */\n      [1, 0, 0],\n      [1, 1, 0],\n      [0, 1, 0]\n    ],\n    strikes: [[0, 1, 1], [0, 1, 1], [1, 0, 0], [0, 0, 0]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_44.svg',\n    name: 'oll_44',\n    scramble: \"MU' RU2R' U' RU' R2rU\",\n    solution: \"F'L'U'LUF U FRUR'U'F'\",\n    type: 'Dash',\n    subtype: 'Letter S',\n    squares: [/* eslint-disable-line */\n      [1, 0, 0],\n      [1, 1, 0],\n      [0, 1, 0]\n    ],\n    strikes: [[0, 1, 0], [1, 1, 0], [0, 0, 1], [0, 0, 1]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_45.svg',\n    name: 'oll_45',\n    scramble: \"M' UR' U2RUR' UR2 r' U\",\n    solution: \"FRUR'U'F' U FRUR'U'F'\",\n    type: 'Dash',\n    subtype: 'Letter S',\n    squares: [/* eslint-disable-line */\n      [0, 0, 1],\n      [0, 1, 1],\n      [0, 1, 0]\n    ],\n    strikes: [[0, 1, 0], [0, 0, 1], [1, 0, 0], [1, 1, 0]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_46.svg',\n    name: 'oll_46',\n    scramble: \"B2R' URU' R' U' R2BR' BU2\",\n    solution: \"F' LF' L2ULUL' U' LF2\",\n    type: 'Dash',\n    subtype: 'Letter S',\n    squares: [/* eslint-disable-line */\n      [0, 1, 0],\n      [0, 1, 1],\n      [1, 0, 1]\n    ],\n    strikes: [[0, 0, 0], [1, 0, 0], [0, 1, 0], [1, 0, 0]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_47.svg',\n    name: 'oll_47',\n    scramble: \"l U' l' U' R2UR' BRU' R2U2\",\n    solution: \"FR' FR2U' R' U' RUR' F2\",\n    type: 'Dash',\n    subtype: 'Letter S',\n    squares: [/* eslint-disable-line */\n      [0, 1, 0],\n      [1, 1, 0],\n      [1, 0, 1]\n    ],\n    strikes: [[0, 0, 0], [1, 1, 0], [0, 1, 0], [1, 0, 0]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_48.svg',\n    name: 'oll_48',\n    scramble: \"B' U' R' U' R y URU2R' U' RU'\",\n    solution: \"(R' FRF' R' FRF') (RU R' U' RUR')\",\n    type: 'Dash',\n    subtype: 'Letter S',\n    squares: [/* eslint-disable-line */\n      [0, 1, 1],\n      [1, 1, 0],\n      [0, 0, 1]\n    ],\n    strikes: [[0, 0, 0], [0, 1, 0], [0, 1, 0], [1, 0, 1]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_49.svg',\n    name: 'oll_49',\n    scramble: \"FURUR' y' U' R' U2RUR' U'\",\n    solution: \"(LF' L' FLF' L' F) (L' U' L UL' U' L)\",\n    type: 'Dash',\n    subtype: 'Letter S',\n    squares: [/* eslint-disable-line */\n      [1, 1, 0],\n      [0, 1, 1],\n      [1, 0, 0]\n    ],\n    strikes: [[0, 0, 0], [1, 0, 1], [0, 1, 0], [0, 1, 0]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_50.svg',\n    name: 'oll_50',\n    scramble: \"LUF' U' L' ULFL'\",\n    solution: \"(L F' L' U' L U) (F U' L')\",\n    type: 'Line',\n    subtype: 'Lightning',\n    squares: [/* eslint-disable-line */\n      [0, 0, 1],\n      [1, 1, 1],\n      [1, 0, 0]\n    ],\n    strikes: [[1, 1, 0], [0, 0, 1], [0, 1, 0], [0, 0, 0]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_51.svg',\n    name: 'oll_51',\n    scramble: \"R' U' FURU' R' F' R\",\n    solution: \"(R' FRUR' U') (F' UR)\",\n    type: 'Line',\n    subtype: 'Lightning',\n    squares: [/* eslint-disable-line */\n      [1, 0, 0],\n      [1, 1, 1],\n      [0, 0, 1]\n    ],\n    strikes: [[0, 1, 1], [0, 0, 0], [0, 1, 0], [0, 0, 1]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_52.svg',\n    name: 'oll_52',\n    scramble: \"L' U' L y' LF' L' ULFL'\",\n    solution: \"(LF' L' U' LFL') y' (R' UR)\",\n    type: 'Line',\n    subtype: 'Letter L',\n    squares: [/* eslint-disable-line */\n      [0, 0, 0],\n      [1, 1, 1],\n      [1, 0, 0]\n    ],\n    strikes: [[1, 1, 0], [1, 0, 0], [0, 1, 1], [0, 0, 0]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_53.svg',\n    name: 'oll_53',\n    scramble: \"RUR' y R' FRU' R' F' R\",\n    solution: \"(R' FRUR' F' R) y (LU' L')\",\n    type: 'Line',\n    subtype: 'Letter L',\n    squares: [/* eslint-disable-line */\n      [0, 0, 0],\n      [1, 1, 1],\n      [0, 0, 1]\n    ],\n    strikes: [[0, 1, 1], [0, 0, 0], [1, 1, 0], [1, 0, 0]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_54.svg',\n    name: 'oll_54',\n    scramble: \"L' B' L U' R' U R L' B L\",\n    solution: \"(L' B' L) (R' U' RU) (L' BL)\",\n    type: 'Line',\n    subtype: 'Letter L',\n    squares: [/* eslint-disable-line */\n      [0, 0, 0],\n      [1, 1, 1],\n      [0, 0, 1]\n    ],\n    strikes: [[1, 1, 0], [1, 0, 0], [0, 1, 0], [0, 0, 1]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_55.svg',\n    name: 'oll_55',\n    scramble: \"L F L' U R U' R' LF' L' U2\",\n    solution: \"(RBR') (LUL' U') (RB' R')\",\n    type: 'Line',\n    subtype: 'Letter L',\n    squares: [/* eslint-disable-line */\n      [0, 0, 0],\n      [1, 1, 1],\n      [1, 0, 0]\n    ],\n    strikes: [[0, 1, 1], [0, 0, 1], [0, 1, 0], [1, 0, 0]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_56.svg',\n    name: 'oll_56',\n    scramble: \"(RL' BLR') U2 (RL' BLR')U'\",\n    solution: \"(RL' BLR') U2 (RL' BLR')\",\n    type: 'Dash',\n    subtype: 'Letter F',\n    squares: [/* eslint-disable-line */\n      [1, 0, 1],\n      [0, 1, 1],\n      [1, 1, 1]\n    ],\n    strikes: [[0, 1, 0], [0, 0, 0], [0, 0, 0], [0, 1, 0]]\n  },\n  {\n    active: true,\n    category: 'OLL',\n    image: 'oll_57.svg',\n    name: 'oll_57',\n    scramble: \"F R' F' R L' U R U' R' L\",\n    solution: \"(RUR' U') r (R' URU' r')\",\n    type: 'Line',\n    subtype: 'Letter H',\n    squares: [/* eslint-disable-line */\n      [1, 0, 1],\n      [1, 1, 1],\n      [1, 0, 1]\n    ],\n    strikes: [[0, 1, 0], [0, 0, 0], [0, 1, 0], [0, 0, 0]]\n  }\n];\n\nexport const PLLs: algorithm[] = [\n  {\n    active: true,\n    category: 'PLL',\n    image: 'pll_1.png',\n    name: 'pll_1',\n    scramble: \"x' (U L' U R2 U') (L U R2 U2)\",\n    solution: \"x' (R' D R') U2 (R D' R' U2 R2)\",\n    type: 'A',\n    subtype: 'A',\n    squares: squresFull,\n    strikes: srikesNone,\n    lines: [[{ x: 0, y: 0 }, { x: 2, y: 0 }, { x: 2, y: 2 }]]\n  },\n  {\n    active: true,\n    category: 'PLL',\n    image: 'pll_2.png',\n    name: 'pll_2',\n    scramble: \"x' (U' R U' L2U) (R' U' L2 U2)\",\n    solution: \"x' (L D' L) U2 (L' D L) U2 L2\",\n    type: 'A',\n    subtype: 'A',\n    squares: squresFull,\n    strikes: srikesNone,\n    lines: [[{ x: 0, y: 0 }, { x: 0, y: 2 }, { x: 2, y: 0 }]]\n  },\n  {\n    active: true,\n    category: 'PLL',\n    image: 'pll_3.png',\n    name: 'pll_3',\n    scramble: \"x' (R U' R' D R U R' D') (R U R' D R U' R' D')\",\n    solution: \"x' (R U' R' D R U R' D') (R U R' D R U' R' D')\",\n    type: 'E',\n    subtype: 'E',\n    squares: squresFull,\n    strikes: srikesNone,\n    lines: []\n  },\n  {\n    active: true,\n    category: 'PLL',\n    image: 'pll_4.png',\n    name: 'pll_4',\n    scramble: \"(R' URU' R2) y' (R' U' RU) (BRB' R' B2U')\",\n    solution: \"(R' URU' R2) y' (R' U' RU) (BRB' R' B2U')\",\n    type: 'E',\n    subtype: 'E',\n    squares: squresFull,\n    strikes: srikesNone,\n    lines: []\n  },\n  {\n    active: true,\n    category: 'PLL',\n    image: 'pll_5.png',\n    name: 'pll_5',\n    scramble: \"(M2 U') (M2 U2) (M2 U') M2\",\n    solution: \"(M2 U') (M2 U2) (M2 U') M2\",\n    type: 'H',\n    subtype: 'H',\n    squares: squresFull,\n    strikes: srikesNone,\n    lines: []\n  },\n  {\n    active: true,\n    category: 'PLL',\n    image: 'pll_6.png',\n    name: 'pll_6',\n    scramble: \"(R' UR' U') (R' U') (R' U R U R2)\",\n    solution: \"(R2 U') (R' U' RU) (R U R U' R)\",\n    type: 'U',\n    subtype: 'U',\n    squares: squresFull,\n    strikes: srikesNone,\n    lines: []\n  },\n  {\n    active: true,\n    category: 'PLL',\n    image: 'pll_7.png',\n    name: 'pll_7',\n    scramble: \"(R2 U') (R' U' RU) (R U R U' R)\",\n    solution: \"(R' UR' U') (R' U') (R' U R U R2)\",\n    type: 'U',\n    subtype: 'U',\n    squares: squresFull,\n    strikes: srikesNone,\n    lines: []\n  },\n  {\n    active: true,\n    category: 'PLL',\n    image: 'pll_8.png',\n    name: 'pll_8',\n    scramble: \"L U' R' UL' U2 R U' R' U2 R x2\",\n    solution: \"B2 (R' U' R) B2 (L' D L' D') L2\",\n    type: 'J',\n    subtype: 'J',\n    squares: squresFull,\n    strikes: srikesNone,\n    lines: []\n  },\n  {\n    active: true,\n    category: 'PLL',\n    image: 'pll_9.png',\n    name: 'pll_9',\n    scramble: \"(R' U L U' R) (U2 L' U L U2 L') x2\",\n    solution: \"B2 (L U L') B2 (R D' R D) R2\",\n    type: 'J',\n    subtype: 'J',\n    squares: squresFull,\n    strikes: srikesNone,\n    lines: []\n  },\n  {\n    active: true,\n    category: 'PLL',\n    image: 'pll_10.png',\n    name: 'pll_10',\n    scramble: \"(R U R' U') (R' F R2 U') (R' U' R U R' F')\",\n    solution: \"(R U R' U') (R' F R2 U') (R' U' R U R' F')\",\n    type: 'T',\n    subtype: 'T',\n    squares: squresFull,\n    strikes: srikesNone,\n    lines: []\n  },\n  {\n    active: true,\n    category: 'PLL',\n    image: 'pll_11.png',\n    name: 'pll_11',\n    scramble: \"(L' U L' U') y'(R' F') (R2 U' R' U R' F R F) y\",\n    solution: \"(L' U L' U') y'(R' F') (R2 U' R' U R' F R F)\",\n    type: 'V',\n    subtype: 'V',\n    squares: squresFull,\n    strikes: srikesNone,\n    lines: []\n  },\n  {\n    active: true,\n    category: 'PLL',\n    image: 'pll_12.png',\n    name: 'pll_12',\n    scramble: \"(L U2 L' U2) (L F' L' U' LU) (L F L2 U)\",\n    solution: \"(L U2 L' U2) (L F' L' U' LU) (L F L2 U)\",\n    type: 'R',\n    subtype: 'R',\n    squares: squresFull,\n    strikes: srikesNone,\n    lines: []\n  },\n  {\n    active: true,\n    category: 'PLL',\n    image: 'pll_13.png',\n    name: 'pll_13',\n    scramble: \"(R' U2 R U2) (R' F R U R' U') (R' F' R2 U')\",\n    solution: \"(R' U2 R U2) (R' F R U R' U') (R' F' R2 U')\",\n    type: 'R',\n    subtype: 'R',\n    squares: squresFull,\n    strikes: srikesNone,\n    lines: []\n  },\n  {\n    active: true,\n    category: 'PLL',\n    image: 'pll_14.png',\n    name: 'pll_14',\n    scramble: \"(L U L' B2) z' (R' U L' U' L) (U' R B2) z\",\n    solution: \"z x' (U2 r' U R' U R U' r U2) y (L F' L') x\",\n    type: 'G',\n    subtype: 'G',\n    squares: squresFull,\n    strikes: srikesNone,\n    lines: []\n  },\n  {\n    active: true,\n    category: 'PLL',\n    image: 'pll_15.png',\n    name: 'pll_15',\n    scramble: \"(R' U' R B2) z (L U' R U R') (U r' U2) z' x\",\n    solution: \"z' x' (U2 l U' LU' L' U l' U2) y' (R' F R) x\",\n    type: 'G',\n    subtype: 'G',\n    squares: squresFull,\n    strikes: srikesNone,\n    lines: []\n  },\n  {\n    active: true,\n    category: 'PLL',\n    image: 'pll_16.png',\n    name: 'pll_16',\n    scramble: \"z' (U2 l U' LU' L' U l' U2) y' (R' F R) x\",\n    solution: \"(R' U' R B2) z (L U' R U R') (U r' U2) z' x\",\n    type: 'G',\n    subtype: 'G',\n    squares: squresFull,\n    strikes: srikesNone,\n    lines: []\n  },\n  {\n    active: true,\n    category: 'PLL',\n    image: 'pll_17.png',\n    name: 'pll_17',\n    scramble: \"z (U2 r' U R' U R U' r U2) y (L F' L') x\",\n    solution: \"(L U L' B2) z' (R' U L' U' L) (U' R B2) z\",\n    type: 'G',\n    subtype: 'G',\n    squares: squresFull,\n    strikes: srikesNone,\n    lines: []\n  },\n  {\n    active: true,\n    category: 'PLL',\n    image: 'pll_18.png',\n    name: 'pll_18',\n    scramble: \"(U R' U' R U') (R U R U' R' U) (R U R2 U' R' U)\",\n    solution: \"(U R' U' R U') (R U R U' R' U) (R U R2 U' R' U)\",\n    type: 'Z',\n    subtype: 'Z',\n    squares: squresFull,\n    strikes: srikesNone,\n    lines: []\n  },\n  {\n    active: true,\n    category: 'PLL',\n    image: 'pll_19.png',\n    name: 'pll_19',\n    scramble: \"L U' R U2 L' U R') (L U' R U2 L' U R') U'\",\n    solution: \"L U' R U2 L' U R') (L U' R U2 L' U R') U'\",\n    type: 'N',\n    subtype: 'N',\n    squares: squresFull,\n    strikes: srikesNone,\n    lines: []\n  },\n  {\n    active: true,\n    category: 'PLL',\n    image: 'pll_20.png',\n    name: 'pll_20',\n    scramble: \"(R' UL' U2 R U' L) (R' UL' U2 R U' L) U\",\n    solution: \"(R' UL' U2 R U' L) (R' UL' U2 R U' L) U\",\n    type: 'N',\n    subtype: 'N',\n    squares: squresFull,\n    strikes: srikesNone,\n    lines: []\n  },\n  {\n    active: true,\n    category: 'PLL',\n    image: 'pll_21.png',\n    name: 'pll_21',\n    scramble: \"(F R U' R' U' R U R' F') (R U R' U') (R' F R F')\",\n    solution: \"(F R U' R' U' R U R' F') (R U R' U') (R' F R F')\",\n    type: 'Y',\n    subtype: 'Y',\n    squares: squresFull,\n    strikes: srikesNone,\n    lines: []\n  }\n];\n","import * as fs from 'fs';\nimport { algorithm, line, OLLs, PLLs, point } from './server/const';\n\ntype strikeFormatted = {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  fill: string;\n};\n\ntype squareFormatted = strikeFormatted & {\n  stroke: string;\n  strokeWidth: number;\n};\n\ntype marker = {\n  points: point[];\n  angle: number;\n};\n\nconst filesPath: string = 'public/images/';\n\nconst getSVGcontent = (\n  { squares, strikes, lines = [] }: algorithm,\n  squareLength: number,\n  spacingLength: number = squareLength / 10\n): string => {\n  const cubeSize = squares[0].length;\n\n  console.log('lines', lines);\n\n  const colorPrimary = '#ffff45';\n  const colorSecondary = 'gray';\n  const colorBackground = 'black';\n\n  const squaresFormatted: squareFormatted[][] = squares.map(\n    (row: number[], rowIndex: number) =>\n      row.map((face, columnIndex) => ({\n        x: spacingLength * 2 + columnIndex * (squareLength + spacingLength),\n        y: spacingLength * 2 + rowIndex * (squareLength + spacingLength),\n        width: squareLength,\n        height: squareLength,\n        fill: face ? colorPrimary : colorSecondary,\n        stroke: colorBackground,\n        strokeWidth: spacingLength\n      }))\n  );\n\n  const getStrikePosition = (index: number): number => {\n    if (index === 0) {\n      return 0.5 * spacingLength;\n    }\n\n    if (index - 1 === cubeSize) {\n      return 1.5 * spacingLength + (index - 1) * (spacingLength + squareLength);\n    }\n\n    return spacingLength * 2 + (index - 1) * (spacingLength + squareLength);\n  };\n\n  const strikesTop: strikeFormatted[] = strikes[0]\n    ? strikes[0].map((strike: number, strikeIndex: number) => ({\n        x: getStrikePosition(strikeIndex + 1),\n        y: getStrikePosition(0),\n        width: squareLength,\n        height: spacingLength,\n        fill: strike ? colorPrimary : ''\n      }))\n    : [];\n\n  const strikesRight: strikeFormatted[] = strikes[1]\n    ? strikes[1].map((strike: number, strikeIndex: number) => ({\n        x: getStrikePosition(cubeSize + 1),\n        y: getStrikePosition(strikeIndex + 1),\n        width: spacingLength,\n        height: squareLength,\n        fill: strike ? colorPrimary : ''\n      }))\n    : [];\n\n  const strikesBottom: strikeFormatted[] = strikes[2]\n    ? strikes[2].map((strike: number, strikeIndex: number) => ({\n        x: getStrikePosition(strikeIndex + 1),\n        y: getStrikePosition(cubeSize + 1),\n        width: squareLength,\n        height: spacingLength,\n        fill: strike ? colorPrimary : ''\n      }))\n    : [];\n\n  const strikesLeft: strikeFormatted[] = strikes[3]\n    ? strikes[3].map((strike: number, strikeIndex: number) => ({\n        x: getStrikePosition(0),\n        y: getStrikePosition(strikeIndex + 1),\n        width: spacingLength,\n        height: squareLength,\n        fill: strike ? colorPrimary : ''\n      }))\n    : [];\n\n  const strikesFormatted: strikeFormatted[][] = [\n    strikesTop,\n    strikesRight,\n    strikesBottom,\n    strikesLeft\n  ];\n\n  const getCenter = ({ x: squareX, y: squareY }: point) => {\n    const x =\n      2 * spacingLength +\n      0.5 * squareLength +\n      (spacingLength + squareLength) * squareX;\n    const y =\n      2 * spacingLength +\n      0.5 * squareLength +\n      (spacingLength + squareLength) * squareY;\n\n    return { x, y };\n  };\n\n  const getPoints = (line: line): line => line.map(point => getCenter(point));\n\n  const lineToMarker = (pointA: point, pointB: point) => {\n    const pointC = {\n      x: pointA.x + Math.abs(pointB.x - pointA.x),\n      y: pointA.y\n    };\n\n    const rotationAngle =\n      (Math.atan2(pointB.y - pointA.y, pointB.x - pointA.x) * 180) / Math.PI -\n      Math.atan2(pointC.y - pointA.y, pointC.x - pointA.x);\n\n    const leftBackPoint = {\n      x: pointB.x - 0.25 * squareLength,\n      y: pointB.y - 0.25 * squareLength\n    };\n\n    const rightBackPoint = {\n      x: pointB.x - 0.25 * squareLength,\n      y: pointB.y + 0.25 * squareLength\n    };\n\n    console.log('pointA', pointA);\n    console.log('pointB', pointB);\n    console.log('leftBackPoint', leftBackPoint);\n    console.log('rightBackPoint', rightBackPoint);\n\n    return {\n      points: [leftBackPoint, pointB, rightBackPoint],\n      angle: rotationAngle\n    };\n  };\n\n  const getMarkers = (line: line): marker[] => {\n    const markers = [];\n\n    for (let i = 0; i < line.length; i++) {\n      if (i > 0) {\n        markers.push(lineToMarker(line[i - 1], line[i]));\n      }\n    }\n\n    markers.push(lineToMarker(line[line.length - 1], line[0]));\n\n    return markers;\n  };\n\n  const linesFormatted: line[] = lines.map(line => getPoints(line));\n\n  const boardSize: number =\n    spacingLength * 3 + cubeSize * (squareLength + spacingLength);\n\n  const content: string = `\n    <svg \n      xmlns=\"http://www.w3.org/2000/svg\" \n      width=\"${boardSize}\"\n      height=\"${boardSize}\"\n    >\n      <!-- BACKGROUND -->\n      <rect \n        width=\"${boardSize}\"\n        height=\"${boardSize}\"\n        fill=\"${colorBackground}\"  \n      />\n      \n      <!-- SQUARES -->\n      ${squaresFormatted\n        .map(row =>\n          row\n            .map(\n              square => `\n                <rect \n                  x=\"${square.x}\" \n                  y=\"${square.y}\" \n                  width=\"${square.width}\"\n                  height=\"${square.height}\"\n                  fill=\"${square.fill}\"\n                />\n              `\n            )\n            .join('')\n        )\n        .join('')}\n      \n          \n      <!-- STRIKES -->\n      ${strikesFormatted\n        .map(strikeGroup =>\n          strikeGroup\n            .filter(strike => strike.fill)\n            .map(\n              strike => `\n                <rect \n                  x=\"${strike.x}\" \n                  y=\"${strike.y}\" \n                  width=\"${strike.width}\"\n                  height=\"${strike.height}\"\n                  fill=\"${strike.fill}\"\n                />\n              `\n            )\n            .join('')\n        )\n        .join('')}\n      \n      <!-- LINES -->\n      ${linesFormatted.map(\n        line => `\n          <polyline \n          points=\"${line.reduce(\n            (points, point) => `${points} ${point.x},${point.y}`,\n            ''\n          ) + ` ${line[0].x},${line[0].y}`}\" \n          fill=\"none\" \n          stroke=\"orange\" \n          stroke-width=\"3\"\n          />\n        `\n      )}\n      \n      <!-- MARKERS -->\n      ${linesFormatted\n        .map((line: line) =>\n          getMarkers(line)\n            .map(\n              ({ points, angle }: { points: point[]; angle: number }) => `\n                <polygon \n                  points=\"${points.reduce(\n                    (points: string, point: point) =>\n                      `${points} ${point.x},${point.y}`,\n                    ''\n                  )}\"\n                  fill=\"red\" \n                  transform=\"\n                  translate(${points[1].x} ${points[1].y}) \n                  rotate(${angle} 0 0) \n                  translate(${-1 * points[1].x} ${-1 * points[1].y})\"\n                />\n              `\n            )\n            .join('')\n        )\n        .join('')}\n    </svg>\n  `;\n\n  return content;\n};\n\nconst writeFile = (\n  path: string,\n  name: string,\n  extension: string,\n  content: string\n) => {\n  return new Promise(resolve => {\n    fs.writeFile(`${path}${name}${extension}`, content, err => {\n      if (err) {\n        throw err;\n      }\n\n      resolve(`File ${name} created successfully`);\n    });\n  });\n};\n\n/* write files */\nOLLs.filter((OLL: algorithm) => OLL.squares).forEach(\n  async (scramble: algorithm) => {\n    const content = getSVGcontent(scramble, 25, 3);\n    const result = await writeFile(filesPath, scramble.name, '.svg', content);\n    console.info(result);\n  }\n);\n\nPLLs.filter((PLL: algorithm) => PLL.lines && PLL.lines.length).forEach(\n  async (scramble: algorithm) => {\n    const content = getSVGcontent(scramble, 25, 3);\n    const result = await writeFile(filesPath, scramble.name, '.svg', content);\n    console.info(result);\n  }\n);\n"]}}]
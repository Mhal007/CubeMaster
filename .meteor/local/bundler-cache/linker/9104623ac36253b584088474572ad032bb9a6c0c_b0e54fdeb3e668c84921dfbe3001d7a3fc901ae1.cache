[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nWebAppInternals = Package.webapp.WebAppInternals;\nmain = Package.webapp.main;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nPromise = Package.promise.Promise;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"lib\":{\"global-helpers.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// lib/global-helpers.js                                                                                     //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nmodule.export({\n  getRandomScramble: () => getRandomScramble\n});\nconst allowedMoves = ['F', \"F'\", 'F2', 'B', \"B'\", 'B2', 'R', \"R'\", 'R2', 'L', \"L'\", 'L2', 'U', \"U'\", 'U2', 'D', \"D'\", 'D2'];\n\nconst getRandomMove = () => allowedMoves[Math.floor(Math.random() * allowedMoves.length)];\n\nconst movesConflict = (moveA, moveB) => moveA && moveB && moveA.split('').some(character => moveB.includes(character));\n\nconst getRandomScramble = movesNr => {\n  const moves = [];\n  let move;\n  let previousMove;\n\n  for (let i = 0; i < movesNr; i++) {\n    move = getRandomMove();\n\n    while (movesConflict(move, previousMove)) {\n      move = getRandomMove();\n    }\n\n    previousMove = move;\n    moves.push(move);\n  }\n\n  return moves.join(' ');\n};\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"server\":{\"publications\":{\"algorithms.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// server/publications/algorithms.js                                                                         //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Algorithms;\nmodule.link(\"../../collections/algorithms\", {\n  Algorithms(v) {\n    Algorithms = v;\n  }\n\n}, 1);\n// TODO Only publish algorithms that are public or belong to the current user\nMeteor.publish('algorithms', () => Algorithms.find());\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"results.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// server/publications/results.js                                                                            //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Results;\nmodule.link(\"../../collections/results\", {\n  Results(v) {\n    Results = v;\n  }\n\n}, 1);\n// TODO Only publish algorithms that are public or belong to the current user\nMeteor.publish('results', () => Results.find());\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"main.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// server/main.js                                                                                            //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet createAlgorithms;\nmodule.link(\"./algorithmsCreation\", {\n  createAlgorithms(v) {\n    createAlgorithms = v;\n  }\n\n}, 1);\nMeteor.startup(() => {\n  //UniConfig.private.runOnce('createAlgorithms', createAlgorithms);\n  createAlgorithms();\n});\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"collections\":{\"algorithms.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// collections/algorithms.js                                                                                 //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nmodule.export({\n  Algorithms: () => Algorithms\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 1);\nlet check;\nmodule.link(\"meteor/check\", {\n  check(v) {\n    check = v;\n  }\n\n}, 2);\nlet expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 3);\nconst Algorithms = new Mongo.Collection('algorithms');\nMeteor.methods({\n  'algorithms.toggleActive': (algId, active) => {\n    check(active, Boolean);\n    check(algId, String);\n    Algorithms.update(algId, {\n      $set: {\n        active\n      }\n    });\n  },\n  'algorithms.activateAll': category => {\n    Algorithms.update({\n      category\n    }, {\n      $set: {\n        active: true\n      }\n    }, {\n      multi: true\n    });\n  },\n  'algorithms.deactivateAll': category => {\n    Algorithms.update({\n      category\n    }, {\n      $set: {\n        active: false\n      }\n    }, {\n      multi: true\n    });\n  },\n  'algorithms.insert': (_ref) => {\n    let {\n      category,\n      image,\n      scramble,\n      solution,\n      subtype,\n      type\n    } = _ref;\n    expect(category).to.be.a('string');\n    expect(image).to.be.a('string');\n    expect(scramble).to.be.a('string');\n    expect(solution).to.be.a('string');\n    expect(subtype).to.be.a('string');\n    expect(type).to.be.a('string'); // Make sure the user is logged in before inserting a algorithm\n\n    /* if (! Meteor.userId()) {\n         throw new Meteor.Error('not-authorized');\n     }*/\n\n    const doc = {\n      createdAt: new Date(),\n      category,\n      image,\n      scramble,\n      solution,\n      subtype,\n      type\n    };\n    Algorithms.insert(doc);\n  },\n\n  'algorithms.search'(text) {\n    check(text, String);\n    return Algorithms.find();\n  },\n\n  'algorithms.remove'(algorithmId) {\n    check(algorithmId, String);\n    /*const algorithm = Algorithms.findOne(algorithmId);\n    if (algorithm.private && algorithm.owner !== Meteor.userId()) {\n      // If the algorithm is private, make sure only the owner can delete it\n          throw new Meteor.Error('not-authorized');\n    }*/\n\n    Algorithms.remove(algorithmId);\n  }\n  /*,\n  'algorithms.setChecked'(algorithmId, setChecked) {\n      check(algorithmId, String);\n      check(setChecked, Boolean);\n       const algorithm = Algorithms.findOne(algorithmId);\n      if (algorithm.private && algorithm.owner !== Meteor.userId()) {\n            // If the algorithm is private, make sure only the owner can check it off\n                throw new Meteor.Error('not-authorized');\n          }\n       Algorithms.update(algorithmId, { $set: { checked: setChecked } });\n  },\n  'algorithms.setPrivate'(algorithmId, setToPrivate) {\n      check(algorithmId, String);\n      check(setToPrivate, Boolean);\n       const algorithm = Algorithms.findOne(algorithmId);\n       // Make sure only the algorithm owner can make a algorithm private\n      if (algorithm.owner !== Meteor.userId()) {\n          throw new Meteor.Error('not-authorized');\n      }\n       Algorithms.update(algorithmId, { $set: { private: setToPrivate } });\n  },*/\n\n\n});\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"results.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// collections/results.js                                                                                    //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nmodule.export({\n  Results: () => Results\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 1);\nlet check;\nmodule.link(\"meteor/check\", {\n  check(v) {\n    check = v;\n  }\n\n}, 2);\nconst Results = new Mongo.Collection('results');\nMeteor.methods({\n  'results.insert': (_ref) => {\n    let {\n      algorithmId,\n      category,\n      real,\n      scramble,\n      time\n    } = _ref;\n    check(category, String);\n    check(real, Boolean);\n    check(time, Number);\n\n    if (category === 'OLL' || category === 'PLL' || category === '3x3x3') {\n      check(scramble, String);\n    }\n\n    if (category === 'OLL' || category === 'PLL') {\n      check(algorithmId, String);\n    } // Make sure the user is logged in before inserting a result\n\n    /* if (! Meteor.userId()) {\n     throw new Meteor.Error('not-authorized');\n     }*/\n\n\n    const doc = {\n      algorithmId,\n      category,\n      createdAt: new Date(),\n      real,\n      scramble,\n      time\n    };\n    Results.insert(doc);\n  },\n  'results.search': text => {\n    check(text, String);\n    return Results.find();\n  },\n  'results.remove': resultId => {\n    check(resultId, String);\n    /*const result = Results.findOne(resultId);\n     if (result.private && result.owner !== Meteor.userId()) {\n     // If the result is private, make sure only the owner can delete it\n     throw new Meteor.Error('not-authorized');\n     }*/\n\n    Results.remove(resultId);\n  }\n});\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"devops\":{\"generateSVGs.ts\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// devops/generateSVGs.ts                                                                                    //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nlet fs;\nmodule.link(\"fs\", {\n  \"*\"(v) {\n    fs = v;\n  }\n\n}, 0);\nlet OLLs, PLLs;\nmodule.link(\"../server/const\", {\n  OLLs(v) {\n    OLLs = v;\n  },\n\n  PLLs(v) {\n    PLLs = v;\n  }\n\n}, 1);\nconst filesPath = '../public/images/';\n\nconst getSVGcontent = function (_ref, squareLength) {\n  let {\n    squares,\n    strikes,\n    lines = []\n  } = _ref;\n  let spacingLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : squareLength / 10;\n  const cubeSize = squares[0].length;\n  console.log('lines', lines);\n  const colorPrimary = '#ffff45';\n  const colorSecondary = 'gray';\n  const colorBackground = 'black';\n  const squaresFormatted = squares.map((row, rowIndex) => row.map((face, columnIndex) => ({\n    x: spacingLength * 2 + columnIndex * (squareLength + spacingLength),\n    y: spacingLength * 2 + rowIndex * (squareLength + spacingLength),\n    width: squareLength,\n    height: squareLength,\n    fill: face ? colorPrimary : colorSecondary,\n    stroke: colorBackground,\n    strokeWidth: spacingLength\n  })));\n\n  const getStrikePosition = index => {\n    if (index === 0) {\n      return 0.5 * spacingLength;\n    }\n\n    if (index - 1 === cubeSize) {\n      return 1.5 * spacingLength + (index - 1) * (spacingLength + squareLength);\n    }\n\n    return spacingLength * 2 + (index - 1) * (spacingLength + squareLength);\n  };\n\n  const strikesTop = strikes[0] ? strikes[0].map((strike, strikeIndex) => ({\n    x: getStrikePosition(strikeIndex + 1),\n    y: getStrikePosition(0),\n    width: squareLength,\n    height: spacingLength,\n    fill: strike ? colorPrimary : ''\n  })) : [];\n  const strikesRight = strikes[1] ? strikes[1].map((strike, strikeIndex) => ({\n    x: getStrikePosition(cubeSize + 1),\n    y: getStrikePosition(strikeIndex + 1),\n    width: spacingLength,\n    height: squareLength,\n    fill: strike ? colorPrimary : ''\n  })) : [];\n  const strikesBottom = strikes[2] ? strikes[2].map((strike, strikeIndex) => ({\n    x: getStrikePosition(strikeIndex + 1),\n    y: getStrikePosition(cubeSize + 1),\n    width: squareLength,\n    height: spacingLength,\n    fill: strike ? colorPrimary : ''\n  })) : [];\n  const strikesLeft = strikes[3] ? strikes[3].map((strike, strikeIndex) => ({\n    x: getStrikePosition(0),\n    y: getStrikePosition(strikeIndex + 1),\n    width: spacingLength,\n    height: squareLength,\n    fill: strike ? colorPrimary : ''\n  })) : [];\n  const strikesFormatted = [strikesTop, strikesRight, strikesBottom, strikesLeft];\n\n  const getCenter = (_ref2) => {\n    let {\n      x: squareX,\n      y: squareY\n    } = _ref2;\n    const x = 2 * spacingLength + 0.5 * squareLength + (spacingLength + squareLength) * squareX;\n    const y = 2 * spacingLength + 0.5 * squareLength + (spacingLength + squareLength) * squareY;\n    return {\n      x,\n      y\n    };\n  };\n\n  const getPoints = line => line.map(point => getCenter(point));\n\n  const lineToMarker = (pointA, pointB) => {\n    const pointC = {\n      x: pointA.x + Math.abs(pointB.x - pointA.x),\n      y: pointA.y\n    };\n    const rotationAngle = Math.atan2(pointB.y - pointA.y, pointB.x - pointA.x) * 180 / Math.PI - Math.atan2(pointC.y - pointA.y, pointC.x - pointA.x);\n    const leftBackPoint = {\n      x: pointB.x - 0.25 * squareLength,\n      y: pointB.y - 0.25 * squareLength\n    };\n    const rightBackPoint = {\n      x: pointB.x - 0.25 * squareLength,\n      y: pointB.y + 0.25 * squareLength\n    };\n    console.log('pointA', pointA);\n    console.log('pointB', pointB);\n    console.log('leftBackPoint', leftBackPoint);\n    console.log('rightBackPoint', rightBackPoint);\n    return {\n      points: [leftBackPoint, pointB, rightBackPoint],\n      angle: rotationAngle\n    };\n  };\n\n  const getMarkers = line => {\n    const markers = [];\n\n    for (let i = 0; i < line.length; i++) {\n      if (i > 0) {\n        markers.push(lineToMarker(line[i - 1], line[i]));\n      }\n    }\n\n    markers.push(lineToMarker(line[line.length - 1], line[0]));\n    return markers;\n  };\n\n  const linesFormatted = lines.map(line => getPoints(line));\n  const boardSize = spacingLength * 3 + cubeSize * (squareLength + spacingLength);\n  const content = \"\\n    <svg \\n      xmlns=\\\"http://www.w3.org/2000/svg\\\" \\n      width=\\\"\".concat(boardSize, \"\\\"\\n      height=\\\"\").concat(boardSize, \"\\\"\\n    >\\n      <!-- BACKGROUND -->\\n      <rect \\n        width=\\\"\").concat(boardSize, \"\\\"\\n        height=\\\"\").concat(boardSize, \"\\\"\\n        fill=\\\"\").concat(colorBackground, \"\\\"  \\n      />\\n      \\n      <!-- SQUARES -->\\n      \").concat(squaresFormatted.map(row => row.map(square => \"\\n                <rect \\n                  x=\\\"\".concat(square.x, \"\\\" \\n                  y=\\\"\").concat(square.y, \"\\\" \\n                  width=\\\"\").concat(square.width, \"\\\"\\n                  height=\\\"\").concat(square.height, \"\\\"\\n                  fill=\\\"\").concat(square.fill, \"\\\"\\n                />\\n              \")).join('')).join(''), \"\\n      \\n          \\n      <!-- STRIKES -->\\n      \").concat(strikesFormatted.map(strikeGroup => strikeGroup.filter(strike => strike.fill).map(strike => \"\\n                <rect \\n                  x=\\\"\".concat(strike.x, \"\\\" \\n                  y=\\\"\").concat(strike.y, \"\\\" \\n                  width=\\\"\").concat(strike.width, \"\\\"\\n                  height=\\\"\").concat(strike.height, \"\\\"\\n                  fill=\\\"\").concat(strike.fill, \"\\\"\\n                />\\n              \")).join('')).join(''), \"\\n      \\n      <!-- LINES -->\\n      \").concat(linesFormatted.map(line => \"\\n          <polyline \\n          points=\\\"\".concat(line.reduce((points, point) => \"\".concat(points, \" \").concat(point.x, \",\").concat(point.y), '') + \" \".concat(line[0].x, \",\").concat(line[0].y), \"\\\" \\n          fill=\\\"none\\\" \\n          stroke=\\\"orange\\\" \\n          stroke-width=\\\"3\\\"\\n          />\\n        \")), \"\\n      \\n      <!-- MARKERS -->\\n      \").concat(linesFormatted.map(line => getMarkers(line).map((_ref3) => {\n    let {\n      points,\n      angle\n    } = _ref3;\n    return \"\\n                <polygon \\n                  points=\\\"\".concat(points.reduce((points, point) => \"\".concat(points, \" \").concat(point.x, \",\").concat(point.y), ''), \"\\\"\\n                  fill=\\\"red\\\" \\n                  transform=\\\"\\n                  translate(\").concat(points[1].x, \" \").concat(points[1].y, \") \\n                  rotate(\").concat(angle, \" 0 0) \\n                  translate(\").concat(-1 * points[1].x, \" \").concat(-1 * points[1].y, \")\\\"\\n                />\\n              \");\n  }).join('')).join(''), \"\\n    </svg>\\n  \");\n  return content;\n};\n\nconst writeFile = (path, name, extension, content) => {\n  return new Promise(resolve => {\n    fs.writeFile(\"\".concat(path).concat(name).concat(extension), content, err => {\n      if (err) {\n        throw err;\n      }\n\n      resolve(\"File \".concat(name, \" created successfully\"));\n    });\n  });\n};\n/* write files */\n\n\nOLLs.filter(OLL => OLL.squares).forEach(scramble => Promise.asyncApply(() => {\n  const content = getSVGcontent(scramble, 25, 3);\n  const result = Promise.await(writeFile(filesPath, scramble.name, '.svg', content));\n  console.info(result);\n}));\nPLLs.filter(PLL => PLL.lines && PLL.lines.length).forEach(scramble => Promise.asyncApply(() => {\n  const content = getSVGcontent(scramble, 25, 3);\n  const result = Promise.await(writeFile(filesPath, scramble.name, '.svg', content));\n  console.info(result);\n}));\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\",\n    \".ts\",\n    \".jsx\",\n    \".tsx\",\n    \".mjs\"\n  ]\n});\n\nrequire(\"/lib/global-helpers.js\");\nrequire(\"/server/publications/algorithms.js\");\nrequire(\"/server/publications/results.js\");\nrequire(\"/collections/algorithms.js\");\nrequire(\"/collections/results.js\");\nrequire(\"/devops/generateSVGs.ts\");\nrequire(\"/server/main.js\");","hash":"f7786962135f91a50c2af4d82aaa84f1d19e8ea8","servePath":"/app.js","sourceMap":{"version":3,"sources":["lib/global-helpers.js","server/publications/algorithms.js","server/publications/results.js","server/main.js","collections/algorithms.js","collections/results.js","devops/generateSVGs.ts"],"names":["module","export","getRandomScramble","allowedMoves","getRandomMove","Math","floor","random","length","movesConflict","moveA","moveB","split","some","character","includes","movesNr","moves","move","previousMove","i","push","join","Meteor","link","v","Algorithms","publish","find","Results","createAlgorithms","startup","Mongo","check","expect","Collection","methods","algId","active","Boolean","String","update","$set","category","multi","image","scramble","solution","subtype","type","to","be","a","doc","createdAt","Date","insert","text","algorithmId","remove","real","time","Number","resultId"],"mappings":"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","file":"/app.js","sourcesContent":["const allowedMoves = [\n  'F',\n  \"F'\",\n  'F2',\n  'B',\n  \"B'\",\n  'B2',\n  'R',\n  \"R'\",\n  'R2',\n  'L',\n  \"L'\",\n  'L2',\n  'U',\n  \"U'\",\n  'U2',\n  'D',\n  \"D'\",\n  'D2'\n];\n\nconst getRandomMove = () =>\n  allowedMoves[Math.floor(Math.random() * allowedMoves.length)];\nconst movesConflict = (moveA, moveB) =>\n  moveA &&\n  moveB &&\n  moveA.split('').some(character => moveB.includes(character));\n\nexport const getRandomScramble = movesNr => {\n  const moves = [];\n\n  let move;\n  let previousMove;\n  for (let i = 0; i < movesNr; i++) {\n    move = getRandomMove();\n    while (movesConflict(move, previousMove)) {\n      move = getRandomMove();\n    }\n\n    previousMove = move;\n    moves.push(move);\n  }\n\n  return moves.join(' ');\n};\n","import { Meteor } from 'meteor/meteor';\nimport { Algorithms } from '../../collections/algorithms';\n\n// TODO Only publish algorithms that are public or belong to the current user\nMeteor.publish('algorithms', () => Algorithms.find());\n","import { Meteor } from 'meteor/meteor';\nimport { Results } from '../../collections/results';\n\n// TODO Only publish algorithms that are public or belong to the current user\nMeteor.publish('results', () => Results.find());\n","import { Meteor } from 'meteor/meteor';\n\nimport { createAlgorithms } from './algorithmsCreation';\n\nMeteor.startup(() => {\n  //UniConfig.private.runOnce('createAlgorithms', createAlgorithms);\n  createAlgorithms();\n});\n","import { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { check } from 'meteor/check';\n\nimport { expect } from 'chai';\n\nexport const Algorithms = new Mongo.Collection('algorithms');\n\nMeteor.methods({\n  'algorithms.toggleActive': (algId, active) => {\n    check(active, Boolean);\n    check(algId, String);\n\n    Algorithms.update(algId, { $set: { active } });\n  },\n  'algorithms.activateAll': category => {\n    Algorithms.update(\n      { category },\n      { $set: { active: true } },\n      { multi: true }\n    );\n  },\n  'algorithms.deactivateAll': category => {\n    Algorithms.update(\n      { category },\n      { $set: { active: false } },\n      { multi: true }\n    );\n  },\n  'algorithms.insert': ({\n    category,\n    image,\n    scramble,\n    solution,\n    subtype,\n    type\n  }) => {\n    expect(category).to.be.a('string');\n    expect(image).to.be.a('string');\n    expect(scramble).to.be.a('string');\n    expect(solution).to.be.a('string');\n    expect(subtype).to.be.a('string');\n    expect(type).to.be.a('string');\n\n    // Make sure the user is logged in before inserting a algorithm\n    /* if (! Meteor.userId()) {\n         throw new Meteor.Error('not-authorized');\n     }*/\n\n    const doc = {\n      createdAt: new Date(),\n      category,\n      image,\n      scramble,\n      solution,\n      subtype,\n      type\n    };\n\n    Algorithms.insert(doc);\n  },\n  'algorithms.search'(text) {\n    check(text, String);\n\n    return Algorithms.find();\n  },\n  'algorithms.remove'(algorithmId) {\n    check(algorithmId, String);\n\n    /*const algorithm = Algorithms.findOne(algorithmId);\n    if (algorithm.private && algorithm.owner !== Meteor.userId()) {\n      // If the algorithm is private, make sure only the owner can delete it\n          throw new Meteor.Error('not-authorized');\n    }*/\n\n    Algorithms.remove(algorithmId);\n  } /*,\n    'algorithms.setChecked'(algorithmId, setChecked) {\n        check(algorithmId, String);\n        check(setChecked, Boolean);\n\n        const algorithm = Algorithms.findOne(algorithmId);\n        if (algorithm.private && algorithm.owner !== Meteor.userId()) {\n              // If the algorithm is private, make sure only the owner can check it off\n                  throw new Meteor.Error('not-authorized');\n            }\n\n        Algorithms.update(algorithmId, { $set: { checked: setChecked } });\n    },\n    'algorithms.setPrivate'(algorithmId, setToPrivate) {\n        check(algorithmId, String);\n        check(setToPrivate, Boolean);\n\n        const algorithm = Algorithms.findOne(algorithmId);\n\n        // Make sure only the algorithm owner can make a algorithm private\n        if (algorithm.owner !== Meteor.userId()) {\n            throw new Meteor.Error('not-authorized');\n        }\n\n        Algorithms.update(algorithmId, { $set: { private: setToPrivate } });\n    },*/\n});\n","import { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { check } from 'meteor/check';\n\nexport const Results = new Mongo.Collection('results');\n\nMeteor.methods({\n  'results.insert': ({ algorithmId, category, real, scramble, time }) => {\n    check(category, String);\n    check(real, Boolean);\n    check(time, Number);\n\n    if (category === 'OLL' || category === 'PLL' || category === '3x3x3') {\n      check(scramble, String);\n    }\n\n    if (category === 'OLL' || category === 'PLL') {\n      check(algorithmId, String);\n    }\n\n    // Make sure the user is logged in before inserting a result\n    /* if (! Meteor.userId()) {\n     throw new Meteor.Error('not-authorized');\n     }*/\n\n    const doc = {\n      algorithmId,\n      category,\n      createdAt: new Date(),\n      real,\n      scramble,\n      time\n    };\n\n    Results.insert(doc);\n  },\n  'results.search': text => {\n    check(text, String);\n\n    return Results.find();\n  },\n  'results.remove': resultId => {\n    check(resultId, String);\n\n    /*const result = Results.findOne(resultId);\n     if (result.private && result.owner !== Meteor.userId()) {\n     // If the result is private, make sure only the owner can delete it\n     throw new Meteor.Error('not-authorized');\n     }*/\n\n    Results.remove(resultId);\n  }\n});\n","import * as fs from 'fs';\nimport { algorithm, line, OLLs, PLLs, point } from '../server/const';\n\ntype strikeFormatted = {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  fill: string;\n};\n\ntype squareFormatted = strikeFormatted & {\n  stroke: string;\n  strokeWidth: number;\n};\n\ntype marker = {\n  points: point[];\n  angle: number;\n};\n\nconst filesPath: string = '../public/images/';\n\nconst getSVGcontent = (\n  { squares, strikes, lines = [] }: algorithm,\n  squareLength: number,\n  spacingLength: number = squareLength / 10\n): string => {\n  const cubeSize = squares[0].length;\n\n  console.log('lines', lines);\n\n  const colorPrimary = '#ffff45';\n  const colorSecondary = 'gray';\n  const colorBackground = 'black';\n\n  const squaresFormatted: squareFormatted[][] = squares.map(\n    (row: number[], rowIndex: number) =>\n      row.map((face, columnIndex) => ({\n        x: spacingLength * 2 + columnIndex * (squareLength + spacingLength),\n        y: spacingLength * 2 + rowIndex * (squareLength + spacingLength),\n        width: squareLength,\n        height: squareLength,\n        fill: face ? colorPrimary : colorSecondary,\n        stroke: colorBackground,\n        strokeWidth: spacingLength\n      }))\n  );\n\n  const getStrikePosition = (index: number): number => {\n    if (index === 0) {\n      return 0.5 * spacingLength;\n    }\n\n    if (index - 1 === cubeSize) {\n      return 1.5 * spacingLength + (index - 1) * (spacingLength + squareLength);\n    }\n\n    return spacingLength * 2 + (index - 1) * (spacingLength + squareLength);\n  };\n\n  const strikesTop: strikeFormatted[] = strikes[0]\n    ? strikes[0].map((strike: number, strikeIndex: number) => ({\n        x: getStrikePosition(strikeIndex + 1),\n        y: getStrikePosition(0),\n        width: squareLength,\n        height: spacingLength,\n        fill: strike ? colorPrimary : ''\n      }))\n    : [];\n\n  const strikesRight: strikeFormatted[] = strikes[1]\n    ? strikes[1].map((strike: number, strikeIndex: number) => ({\n        x: getStrikePosition(cubeSize + 1),\n        y: getStrikePosition(strikeIndex + 1),\n        width: spacingLength,\n        height: squareLength,\n        fill: strike ? colorPrimary : ''\n      }))\n    : [];\n\n  const strikesBottom: strikeFormatted[] = strikes[2]\n    ? strikes[2].map((strike: number, strikeIndex: number) => ({\n        x: getStrikePosition(strikeIndex + 1),\n        y: getStrikePosition(cubeSize + 1),\n        width: squareLength,\n        height: spacingLength,\n        fill: strike ? colorPrimary : ''\n      }))\n    : [];\n\n  const strikesLeft: strikeFormatted[] = strikes[3]\n    ? strikes[3].map((strike: number, strikeIndex: number) => ({\n        x: getStrikePosition(0),\n        y: getStrikePosition(strikeIndex + 1),\n        width: spacingLength,\n        height: squareLength,\n        fill: strike ? colorPrimary : ''\n      }))\n    : [];\n\n  const strikesFormatted: strikeFormatted[][] = [\n    strikesTop,\n    strikesRight,\n    strikesBottom,\n    strikesLeft\n  ];\n\n  const getCenter = ({ x: squareX, y: squareY }: point) => {\n    const x =\n      2 * spacingLength +\n      0.5 * squareLength +\n      (spacingLength + squareLength) * squareX;\n    const y =\n      2 * spacingLength +\n      0.5 * squareLength +\n      (spacingLength + squareLength) * squareY;\n\n    return { x, y };\n  };\n\n  const getPoints = (line: line): line => line.map(point => getCenter(point));\n\n  const lineToMarker = (pointA: point, pointB: point) => {\n    const pointC = {\n      x: pointA.x + Math.abs(pointB.x - pointA.x),\n      y: pointA.y\n    };\n\n    const rotationAngle =\n      (Math.atan2(pointB.y - pointA.y, pointB.x - pointA.x) * 180) / Math.PI -\n      Math.atan2(pointC.y - pointA.y, pointC.x - pointA.x);\n\n    const leftBackPoint = {\n      x: pointB.x - 0.25 * squareLength,\n      y: pointB.y - 0.25 * squareLength\n    };\n\n    const rightBackPoint = {\n      x: pointB.x - 0.25 * squareLength,\n      y: pointB.y + 0.25 * squareLength\n    };\n\n    console.log('pointA', pointA);\n    console.log('pointB', pointB);\n    console.log('leftBackPoint', leftBackPoint);\n    console.log('rightBackPoint', rightBackPoint);\n\n    return {\n      points: [leftBackPoint, pointB, rightBackPoint],\n      angle: rotationAngle\n    };\n  };\n\n  const getMarkers = (line: line): marker[] => {\n    const markers = [];\n\n    for (let i = 0; i < line.length; i++) {\n      if (i > 0) {\n        markers.push(lineToMarker(line[i - 1], line[i]));\n      }\n    }\n\n    markers.push(lineToMarker(line[line.length - 1], line[0]));\n\n    return markers;\n  };\n\n  const linesFormatted: line[] = lines.map(line => getPoints(line));\n\n  const boardSize: number =\n    spacingLength * 3 + cubeSize * (squareLength + spacingLength);\n\n  const content: string = `\n    <svg \n      xmlns=\"http://www.w3.org/2000/svg\" \n      width=\"${boardSize}\"\n      height=\"${boardSize}\"\n    >\n      <!-- BACKGROUND -->\n      <rect \n        width=\"${boardSize}\"\n        height=\"${boardSize}\"\n        fill=\"${colorBackground}\"  \n      />\n      \n      <!-- SQUARES -->\n      ${squaresFormatted\n        .map(row =>\n          row\n            .map(\n              square => `\n                <rect \n                  x=\"${square.x}\" \n                  y=\"${square.y}\" \n                  width=\"${square.width}\"\n                  height=\"${square.height}\"\n                  fill=\"${square.fill}\"\n                />\n              `\n            )\n            .join('')\n        )\n        .join('')}\n      \n          \n      <!-- STRIKES -->\n      ${strikesFormatted\n        .map(strikeGroup =>\n          strikeGroup\n            .filter(strike => strike.fill)\n            .map(\n              strike => `\n                <rect \n                  x=\"${strike.x}\" \n                  y=\"${strike.y}\" \n                  width=\"${strike.width}\"\n                  height=\"${strike.height}\"\n                  fill=\"${strike.fill}\"\n                />\n              `\n            )\n            .join('')\n        )\n        .join('')}\n      \n      <!-- LINES -->\n      ${linesFormatted.map(\n        line => `\n          <polyline \n          points=\"${line.reduce(\n            (points, point) => `${points} ${point.x},${point.y}`,\n            ''\n          ) + ` ${line[0].x},${line[0].y}`}\" \n          fill=\"none\" \n          stroke=\"orange\" \n          stroke-width=\"3\"\n          />\n        `\n      )}\n      \n      <!-- MARKERS -->\n      ${linesFormatted\n        .map((line: line) =>\n          getMarkers(line)\n            .map(\n              ({ points, angle }: { points: point[]; angle: number }) => `\n                <polygon \n                  points=\"${points.reduce(\n                    (points: string, point: point) =>\n                      `${points} ${point.x},${point.y}`,\n                    ''\n                  )}\"\n                  fill=\"red\" \n                  transform=\"\n                  translate(${points[1].x} ${points[1].y}) \n                  rotate(${angle} 0 0) \n                  translate(${-1 * points[1].x} ${-1 * points[1].y})\"\n                />\n              `\n            )\n            .join('')\n        )\n        .join('')}\n    </svg>\n  `;\n\n  return content;\n};\n\nconst writeFile = (\n  path: string,\n  name: string,\n  extension: string,\n  content: string\n) => {\n  return new Promise(resolve => {\n    fs.writeFile(`${path}${name}${extension}`, content, err => {\n      if (err) {\n        throw err;\n      }\n\n      resolve(`File ${name} created successfully`);\n    });\n  });\n};\n\n/* write files */\nOLLs.filter((OLL: algorithm) => OLL.squares).forEach(\n  async (scramble: algorithm) => {\n    const content = getSVGcontent(scramble, 25, 3);\n    const result = await writeFile(filesPath, scramble.name, '.svg', content);\n    console.info(result);\n  }\n);\n\nPLLs.filter((PLL: algorithm) => PLL.lines && PLL.lines.length).forEach(\n  async (scramble: algorithm) => {\n    const content = getSVGcontent(scramble, 25, 3);\n    const result = await writeFile(filesPath, scramble.name, '.svg', content);\n    console.info(result);\n  }\n);\n"]}}]
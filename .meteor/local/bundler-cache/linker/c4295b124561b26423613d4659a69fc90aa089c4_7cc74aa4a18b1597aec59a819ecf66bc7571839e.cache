[{"type":"js","data":"/* Imports for global scope */\n\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nDDP = Package['ddp-client'].DDP;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nTemplate = Package['templating-runtime'].Template;\nmeteorInstall = Package.modules.meteorInstall;\nPromise = Package.promise.Promise;\nAutoupdate = Package.autoupdate.Autoupdate;\nReload = Package.reload.Reload;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"client\":{\"template.main.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// client/template.main.js                                                                                    //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n\nTemplate.body.addContent((function() {\n  var view = this;\n  return HTML.Raw('<div id=\"render-target\"></div>');\n}));\nMeteor.startup(Template.body.renderToDocument);\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lib\":{\"composer.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// client/lib/composer.js                                                                                     //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nimport React from 'react';\nimport { setDefaults } from 'react-komposer';\nimport { Tracker } from 'meteor/tracker';\n\nimport Loader from '../components/loader';\n\nconst errorHandler = error =>\n  Meteor.isProduction ? (\n    <span>An error occurred.</span>\n  ) : (\n    <code>{JSON.stringify(error, null, 2)}</code>\n  );\n\nconst compose = setDefaults({\n  errorHandler,\n  loadingHandler: Loader,\n  pure: true\n});\n\nconst getTrackerLoader = reactiveMapper => {\n  return (props, onData, env) => {\n    let trackerCleanup = null;\n    const handler = Tracker.nonreactive(() => {\n      return Tracker.autorun(() => {\n        // assign the custom clean-up function.\n        trackerCleanup = reactiveMapper(props, onData, env);\n      });\n    });\n\n    return () => {\n      if (typeof trackerCleanup === 'function') trackerCleanup();\n      return handler.stop();\n    };\n  };\n};\n\nexport const composer = (reactiveMapper, options) => {\n  return compose(\n    getTrackerLoader(reactiveMapper),\n    options\n  );\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"components\":{\"results\":{\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// client/components/results/index.js                                                                         //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nimport { Meteor } from 'meteor/meteor';\n\nimport { Results } from '/collections/results';\nimport { composer } from '../../lib/composer';\nimport ResultsComponent from './results';\n\nconst compose = (props, onData) => {\n  const subscriptions = [Meteor.subscribe('results')];\n\n  if (subscriptions.every(subscription => subscription.ready())) {\n    const results = Results.find({}).fetch();\n    onData(null, { results });\n  }\n};\n\nexport default composer(compose)(ResultsComponent);\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"results.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// client/components/results/results.js                                                                       //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nimport React, { Component } from 'react';\nimport { Table } from 'semantic-ui-react';\nimport moment from 'moment';\n\nconst columns = [\n  {\n    label: 'Date',\n    value: 'createdAt',\n    format: value => moment(value).format('DD-MM-YYYY HH:ss')\n  },\n  {\n    label: 'Category',\n    value: 'category'\n  },\n  {\n    label: 'Debugging',\n    value: 'real',\n    format: value => (value ? 'no' : 'yes') // not real means that it is debugging\n  },\n  {\n    label: 'Scramble',\n    value: 'scramble'\n  },\n  {\n    label: 'Time',\n    value: 'time',\n    format: value =>\n      (value / 1000).toLocaleString('en-US', {\n        minimumFractionDigits: 3,\n        maximumFractionDigits: 3\n      }) + 's'\n  }\n];\n\nclass ResultsTab extends Component {\n  constructor(args) {\n    super(args);\n  }\n\n  renderHeader = () => (\n    <Table.Row>\n      {columns.map(({ label }, index) => (\n        <Table.HeaderCell key={index}>{label}</Table.HeaderCell>\n      ))}\n    </Table.Row>\n  );\n\n  renderRow = row => (\n    <Table.Row>\n      {columns.map(({ value, format = value => value }, index) => (\n        <Table.Cell key={index}>{format(row[value])}</Table.Cell>\n      ))}\n    </Table.Row>\n  );\n\n  render() {\n    const { results } = this.props;\n\n    return (\n      <Table\n        inverted\n        headerRow={this.renderHeader}\n        tableData={results}\n        renderBodyRow={this.renderRow}\n      />\n    );\n  }\n}\n\nexport default ResultsTab;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"training\":{\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// client/components/training/index.js                                                                        //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nimport { Meteor } from 'meteor/meteor';\n\nimport { Algorithms } from '../../../collections/algorithms';\nimport { Results } from '../../../collections/results';\nimport { composer } from '../../lib/composer';\nimport Training from './training';\n\n// TODO move it\nconst categories = [\n  {\n    label: 'OLL',\n    value: 'OLL',\n    randomizableAlgorithm: true\n  },\n  {\n    label: 'PLL',\n    value: 'PLL',\n    randomizableAlgorithm: true\n  },\n  {\n    label: '3x3x3',\n    value: '3x3x3',\n    randomizableScramble: true\n  },\n  {\n    label: 'OLL Attack',\n    value: 'OLL-attack',\n    algorithmsCategory: 'OLL',\n    settingsDisabled: true\n  },\n  {\n    label: 'PLL Attack',\n    value: 'PLL-attack',\n    algorithmsCategory: 'PLL',\n    settingsDisabled: true\n  }\n];\n\nconst compose = (props, onData) => {\n  const subscriptions = [\n    Meteor.subscribe('algorithms'),\n    Meteor.subscribe('results')\n  ];\n\n  if (subscriptions.every(subscription => subscription.ready())) {\n    const algorithms = Algorithms.find({}).fetch();\n    const results = Results.find({}).fetch();\n\n    results.forEach(result => {\n      const algorithm = algorithms.find(alg => alg._id === result.algorithmId);\n      const category = categories.find(cat => cat.value === result.category);\n      if (algorithm) {\n        algorithm.results = (algorithm.results || []).concat(result.time);\n      }\n      if (category) {\n        category.results = (category.results || []).concat(result.time);\n      }\n    });\n\n    onData(null, { algorithms, categories });\n  }\n};\n\nexport default composer(compose)(Training);\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"training.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// client/components/training/training.js                                                                     //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nimport React, { Component } from 'react';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport { Grid, Menu } from 'semantic-ui-react';\nimport { SemanticToastContainer, toast } from 'react-semantic-toasts';\n\nimport AlgSettings from '../algSettings';\nimport Averages from '../averages';\nimport TipsAndTricks from '../tipsAndTricks';\nimport TrainingMain from '../trainingMain';\n\nimport { getRandomScramble } from '/lib/global-helpers';\n\n// TODO move it\nconst getRandomEntry = (array, excludeId) => {\n  const index = Math.floor(Math.random() * array.length);\n  const entry = array[index];\n\n  if (array.length > 1 && excludeId && entry._id === excludeId) {\n    return getRandomEntry(array, excludeId);\n  }\n\n  return entry;\n};\n\n// TODO move it\nconst toastNoActiveAlgorithms = () =>\n  toast({\n    title: 'No active algorithms',\n    type: 'warning',\n    description:\n      'Randomizing algorithms pauzed until you select at least one algorithm',\n    time: 5000\n  });\n\nclass Training extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      blocked: {\n        control: false,\n        delete: false,\n        shift: false,\n        space: false\n      },\n      currentAlgorithm: {\n        category: '',\n        image: '',\n        scramble: '',\n        solution: '',\n        subtype: '',\n        type: ''\n      },\n      currentAlgorithmId: 0,\n      currentCategory: this.props.categories[0],\n      isVisibleSolution: false,\n      settingsOpened: true,\n      timerCurrentValue: 0,\n      timerStartValue: 0,\n      timerStatus: 'resetted'\n    };\n  }\n\n  componentDidMount() {\n    this.onChangeAlgorithm();\n    this.props.onToggleLoader(false);\n\n    document.body.addEventListener('keydown', this.onKeyDown);\n    document.body.addEventListener('keypress', this.onKeyPress);\n    document.body.addEventListener('keyup', this.onKeyUp);\n  }\n\n  componentWillUnmount() {\n    document.body.removeEventListener('keydown', this.onKeyDown);\n    document.body.removeEventListener('keypress', this.onKeyPress);\n    document.body.removeEventListener('keyup', this.onKeyUp);\n  }\n\n  onChangeAlgorithm = () => {\n    const { algorithms } = this.props;\n    const { currentAlgorithmId, currentCategory } = this.state;\n\n    this.onReset();\n\n    let newAlgorithm;\n    if (currentCategory.randomizableAlgorithm) {\n      const activeAlgorithms = algorithms.filter(\n        algorithm =>\n          !!algorithm.active && algorithm.category === currentCategory.value\n      );\n\n      if (!activeAlgorithms.length) {\n        toastNoActiveAlgorithms();\n      }\n\n      newAlgorithm = getRandomEntry(activeAlgorithms, currentAlgorithmId);\n    } else if (currentCategory.randomizableScramble) {\n      const scramble = getRandomScramble(25);\n      newAlgorithm = { category: currentCategory.value, scramble };\n    }\n\n    this.setState({\n      currentAlgorithm: newAlgorithm,\n      currentAlgorithmId: newAlgorithm && newAlgorithm._id // alg may be undefined, e.g. for {OLL,PLL}-Attack\n    });\n  };\n\n  onChangeCategory = category => {\n    this.props.onToggleLoader(true);\n\n    this.setState({ currentCategory: category }, () => {\n      this.onChangeAlgorithm();\n      this.props.onToggleLoader(false);\n    });\n  };\n\n  onToggleActive = algorithm => {\n    Meteor.call('algorithms.toggleActive', algorithm._id, !algorithm.active);\n  };\n\n  onActivateAll = () => {\n    const { currentCategory } = this.state;\n    Meteor.call('algorithms.activateAll', currentCategory.value);\n  };\n\n  onDeactivateAll = () => {\n    Meteor.call('algorithms.deactivateAll');\n    toastNoActiveAlgorithms();\n  };\n\n  onKeyDown = event => {\n    if (event.target !== document.body) {\n      return;\n    }\n\n    const blocked = this.state.blocked;\n\n    if ((event.key === 'Enter' || event.key === ' ') && !blocked.space) {\n      event.preventDefault();\n      this.onGoToNextStatus('down');\n      this.setState({ blocked: { ...blocked, space: true } });\n    } else if (event.key === 'r') {\n      event.preventDefault();\n      this.onChangeAlgorithm();\n    } else if (event.key === 'Shift' && !blocked.shift) {\n      event.preventDefault();\n      this.setState({\n        blocked: { ...blocked, shift: true },\n        isVisibleSolution: true\n      });\n    } else if (event.key === 'Control' && !blocked.control) {\n      event.preventDefault();\n      this.setState({ blocked: { ...blocked, control: true } });\n    } else if (\n      (event.key === 'Backspace' ||\n        event.key === 'Delete' ||\n        event.key === 'Escape') &&\n      !blocked.delete\n    ) {\n      event.preventDefault();\n      this.setState({ blocked: { ...blocked, delete: true } });\n    }\n  };\n\n  onKeyPress = event => {\n    if (event.key === ' ' && event.target === document.body) {\n      event.preventDefault();\n    }\n  };\n\n  onKeyUp = event => {\n    if (event.target !== document.body) {\n      return;\n    }\n\n    const { blocked, isVisibleSolution } = this.state;\n\n    if (event.key === 'Enter' || event.key === ' ') {\n      this.onGoToNextStatus('up');\n      this.setState({ blocked: { ...blocked, space: false } });\n    } else if (event.key === 'Shift') {\n      this.setState({\n        blocked: { ...blocked, shift: false },\n        isVisibleSolution: false\n      });\n    } else if (event.key === 'Control') {\n      this.setState({\n        blocked: { ...blocked, control: false },\n        isVisibleSolution: !isVisibleSolution\n      });\n    } else if (\n      event.key === 'Backspace' ||\n      event.key === 'Delete' ||\n      event.key === 'Escape'\n    ) {\n      this.onChangeAlgorithm();\n      this.setState({ blocked: { ...blocked, delete: false } });\n    }\n  };\n\n  onGoToNextStatus = upOrDown => {\n    const {\n      blocked,\n      currentAlgorithm,\n      currentCategory,\n      timerCurrentValue,\n      timerStatus\n    } = this.state;\n\n    if (timerStatus === 'resetted' && upOrDown === 'down' && !blocked.space) {\n      this.setState({ timerStatus: 'pre-inspection' });\n    } else if (timerStatus === 'pre-inspection' && upOrDown === 'up') {\n      this.setState({\n        timerStatus: 'timer-on',\n        timerStartValue: moment().valueOf()\n      });\n      this.timer = setInterval(this.updateTimerTime, 1);\n    } else if (\n      timerStatus === 'timer-on' &&\n      upOrDown === 'down' &&\n      !blocked.space\n    ) {\n      clearInterval(this.timer);\n      this.setState({ timerStatus: 'timer-off' });\n    } else if (\n      timerStatus === 'timer-off' &&\n      upOrDown === 'down' &&\n      !blocked.space\n    ) {\n      /* Save time */\n      const result = {\n        ...(currentAlgorithm && {\n          algorithmId: currentAlgorithm._id,\n          scramble: currentAlgorithm.scramble\n        }),\n        category: currentCategory.value,\n        real: !this.props.debugging,\n        time: timerCurrentValue\n      };\n\n      Meteor.call('results.insert', result, () => this.onChangeAlgorithm());\n    }\n  };\n\n  onReset = () => {\n    clearInterval(this.timer);\n    this.setState({ timerStatus: 'resetted', timerCurrentValue: 0 });\n  };\n\n  updateTimerTime = () => {\n    this.setState(state => ({\n      timerCurrentValue: moment().valueOf() - state.timerStartValue\n    }));\n  };\n\n  render() {\n    const {\n      state: {\n        currentAlgorithm,\n        currentCategory,\n        isVisibleSolution,\n        timerCurrentValue\n      },\n      props: { algorithms, categories },\n      onActivateAll,\n      onToggleActive,\n      onChangeAlgorithm,\n      onChangeCategory,\n      onDeactivateAll\n    } = this;\n\n    const currentAlgorithms = algorithms.filter(\n      algorithm => algorithm.category === currentCategory.value\n    );\n\n    return (\n      <>\n        <SemanticToastContainer />\n        <Grid>\n          <Grid.Column width={4}>\n            <Menu className=\"left-menu\" inverted tabular vertical>\n              {categories.map(category => (\n                <Menu.Item\n                  key={category.value}\n                  name={category.label}\n                  active={currentCategory.value === category.value}\n                  onClick={() => onChangeCategory(category)}\n                />\n              ))}\n            </Menu>\n          </Grid.Column>\n          <Grid.Column width={8} textAlign=\"center\">\n            <TrainingMain\n              currentAlgorithm={currentAlgorithm}\n              isVisibleSolution={isVisibleSolution}\n              onChangeAlgorithm={onChangeAlgorithm}\n              timerCurrentValue={timerCurrentValue}\n            />\n          </Grid.Column>\n          <Grid.Column width={4}>\n            <Averages\n              currentAlgorithm={currentAlgorithm}\n              currentCategory={currentCategory}\n            />\n            <TipsAndTricks />\n          </Grid.Column>\n        </Grid>\n        {this.state.settingsOpened && (\n          <AlgSettings\n            algorithms={currentAlgorithms}\n            currentCategory={currentCategory}\n            onActivateAll={onActivateAll}\n            onToggleActive={onToggleActive}\n            onDeactivateAll={onDeactivateAll}\n          />\n        )}\n        <img src=\"/images/pll_2.png\" />\n        <img src=\"/images/pll_2.svg\" />\n      </>\n    );\n  }\n}\n\nTraining.propTypes = {\n  onToggleLoader: PropTypes.func.isRequired,\n  debugging: PropTypes.bool.isRequired\n};\n\nexport default Training;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"algSettings.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// client/components/algSettings.js                                                                           //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, List, Segment } from 'semantic-ui-react';\nimport groupBy from 'lodash/groupBy';\nimport Slider, { createSliderWithTooltip } from 'rc-slider';\nimport { getAverage } from '../utils';\n\nconst SliderTooltip = createSliderWithTooltip(Slider);\n\nconst AlgSettings = ({\n  algorithms,\n  currentCategory: { settingsDisabled },\n  onActivateAll,\n  onToggleActive,\n  onDeactivateAll\n}) => {\n  const [detailsLevel, setDetailsLevel] = useState(1);\n\n  const algorithmsGrouped =\n    detailsLevel === 0\n      ? groupBy(algorithms, 'category')\n      : detailsLevel === 1\n      ? groupBy(algorithms, 'type')\n      : detailsLevel === 2\n      ? groupBy(algorithms, 'subtype')\n      : [];\n\n  return (\n    <section\n      className={`algorithm-settings${settingsDisabled ? ' disabled' : ''}`}\n    >\n      <List divided verticalAlign=\"middle\">\n        <List.Item>\n          <List.Content floated=\"right\">\n            <div className=\"grouping-level\">\n              <div className=\"title\">Grouping level</div>\n              <SliderTooltip\n                min={0}\n                max={2}\n                onChange={setDetailsLevel}\n                tipFormatter={value => ['None', 'General', 'Precise'][value]}\n                tipProps={{\n                  placement: 'bottom',\n                  visible: true,\n                  borderRadius: '0px'\n                }}\n                value={detailsLevel}\n              />\n            </div>\n          </List.Content>\n          <List.Content>\n            {!settingsDisabled && (\n              <div className=\"controls\">\n                <Button\n                  secondary\n                  onClick={settingsDisabled ? null : onActivateAll}\n                >\n                  Select all\n                </Button>\n                <Button\n                  secondary\n                  onClick={settingsDisabled ? null : onDeactivateAll}\n                >\n                  Unselect all\n                </Button>\n              </div>\n            )}\n          </List.Content>\n        </List.Item>\n      </List>\n\n      {Object.entries(algorithmsGrouped).map(([name, values], index) => (\n        <Segment key={index}>\n          <h5>{name}</h5>\n          {values.map(algorithm => (\n            <div\n              key={algorithm._id}\n              className={`algorithm${\n                settingsDisabled || algorithm.active ? ' active' : ''\n              }`}\n              onClick={() =>\n                settingsDisabled ? null : onToggleActive(algorithm)\n              }\n            >\n              <img src={`/images/${algorithm.image}`} />\n              <div className=\"results-average\">\n                {getAverage(algorithm && algorithm.results)}\n              </div>\n            </div>\n          ))}\n        </Segment>\n      ))}\n    </section>\n  );\n};\n\nAlgSettings.propTypes = {\n  currentCategory: PropTypes.object.isRequired,\n  onActivateAll: PropTypes.func.isRequired,\n  onToggleActive: PropTypes.func.isRequired,\n  onDeactivateAll: PropTypes.func.isRequired\n};\n\nexport default AlgSettings;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"averages.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// client/components/averages.js                                                                              //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { List, Segment } from 'semantic-ui-react';\nimport moment from 'moment';\nimport { getAverage } from '../utils';\n\nconst Averages = ({ currentAlgorithm, currentCategory }) => {\n  const currentAlgorithmAvg = getAverage(\n    currentAlgorithm && currentAlgorithm.results\n  );\n  const currentCategoryAvg = getAverage(\n    currentCategory && currentCategory.results\n  );\n\n  const averages = ['OLL', 'PLL'].includes(currentCategory.value)\n    ? [\n        {\n          header: 'Average for this algorithm',\n          description: currentAlgorithmAvg\n            ? moment(currentAlgorithmAvg).format('ss:SSS')\n            : 'No records'\n        },\n        {\n          header: `Average for all ${currentCategory.value} algorithms`,\n          description: currentCategoryAvg\n            ? moment(currentCategoryAvg).format('ss:SSS')\n            : 'No records'\n        }\n      ]\n    : [\n        {\n          header: `Average for all in ${currentCategory.value}`,\n          description: currentCategoryAvg\n            ? moment(currentCategoryAvg).format('mm:ss:SSS')\n            : 'No records'\n        }\n      ];\n\n  return (\n    <Segment className=\"averages\">\n      <List inverted items={averages} />\n    </Segment>\n  );\n};\n\nAverages.propTypes = {\n  currentAlgorithmAvg: PropTypes.number,\n  currentCategory: PropTypes.object,\n  currentCategoryAvg: PropTypes.number\n};\n\nexport default Averages;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"container.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// client/components/container.js                                                                             //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nimport React, { Component } from 'react';\nimport { Segment } from 'semantic-ui-react';\n\nimport Loader from './loader';\nimport MenuTop from './menuTop';\nimport Results from './results';\nimport Training from './training';\n\nexport default class Container extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      currentTab: 'training',\n      isVisibleLoader: true\n    };\n\n    this.onChangeTab = this.onChangeTab.bind(this);\n  }\n\n  onChangeTab = (e, { name }) => this.setState({ currentTab: name });\n  onToggleLoader = newValue => this.setState({ isVisibleLoader: newValue });\n\n  render() {\n    const {\n      onChangeTab,\n      onToggleLoader,\n\n      state: { currentTab, isVisibleLoader }\n    } = this;\n\n    return (\n      <div className=\"segment\">\n        <header>\n          <MenuTop currentTab={currentTab} onChangeTab={onChangeTab} />\n        </header>\n\n        <Segment>\n          {isVisibleLoader && <Loader />}\n\n          <main>\n            {(currentTab === 'training' || currentTab === 'debugging') && (\n              <Training\n                onToggleLoader={onToggleLoader}\n                debugging={currentTab === 'debugging'}\n              />\n            )}\n            {currentTab === 'results' && (\n              <Results debugging={currentTab === 'debugging'} />\n            )}\n          </main>\n        </Segment>\n\n        <footer />\n      </div>\n    );\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"loader.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// client/components/loader.js                                                                                //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nimport React from 'react';\nimport { Dimmer, Loader as LoaderSemantic } from 'semantic-ui-react';\n\nconst Loader = () => (\n  <Dimmer active page style={{ backgroundColor: 'rgba(0, 0, 0, 0.55)' }}>\n    <LoaderSemantic size=\"large\">Loading</LoaderSemantic>\n  </Dimmer>\n);\n\nexport default Loader;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"menuTop.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// client/components/menuTop.js                                                                               //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon, Menu } from 'semantic-ui-react';\n\nconst MenuTop = ({ currentTab, onChangeTab }) => (\n  <Menu inverted icon=\"labeled\">\n    <Menu.Item\n      active={currentTab === 'home'}\n      color=\"green\"\n      name=\"home\"\n      onClick={onChangeTab}\n    >\n      <Icon name=\"home\" />\n      Home\n    </Menu.Item>\n    <Menu.Item\n      active={currentTab === 'training'}\n      color=\"blue\"\n      name=\"training\"\n      onClick={onChangeTab}\n    >\n      <Icon name=\"book\" />\n      Training\n    </Menu.Item>\n    <Menu.Item\n      active={currentTab === 'debugging'}\n      color=\"brown\"\n      name=\"debugging\"\n      onClick={onChangeTab}\n    >\n      <Icon name=\"pencil\" />\n      Debugging\n    </Menu.Item>\n    <Menu.Item\n      active={currentTab === 'results'}\n      color=\"orange\"\n      name=\"results\"\n      onClick={onChangeTab}\n    >\n      <Icon name=\"lightning\" />\n      Results\n    </Menu.Item>\n    <Menu.Item\n      active={currentTab === 'about'}\n      color=\"teal\"\n      name=\"about\"\n      onClick={onChangeTab}\n    >\n      <Icon name=\"idea\" />\n      About\n    </Menu.Item>\n  </Menu>\n);\nMenuTop.propTypes = {\n  currentTab: PropTypes.string.isRequired,\n  onChangeTab: PropTypes.func.isRequired\n};\n\nexport default MenuTop;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"timer.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// client/components/timer.js                                                                                 //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst Timer = ({ isVisibleSolution, solution, timerCurrentValue }) => (\n  <div className=\"timer\">\n    <p>{moment(timerCurrentValue).format('mm:ss:SSS')}</p>\n    {isVisibleSolution && solution && <p>{solution}</p>}\n  </div>\n);\n\nTimer.propTypes = {\n  isVisibleSolution: PropTypes.bool.isRequired,\n  solution: PropTypes.string,\n  timerCurrentValue: PropTypes.number.isRequired\n};\n\nexport default Timer;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"tipsAndTricks.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// client/components/tipsAndTricks.js                                                                         //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nimport React from 'react';\nimport { List, Segment } from 'semantic-ui-react';\n\nconst tipsList = [\n  {\n    header: 'Enter / Space',\n    description: '... -> start timer -> stop timer -> save result -> ...'\n  },\n  {\n    header: 'r',\n    description: 'Randomize new algorithm'\n  },\n  {\n    header: 'Shift (hold)',\n    description: 'Take a peek at the solution'\n  },\n  {\n    header: 'Control',\n    description: 'Show / hide the solution'\n  },\n  {\n    header: 'Backspace / Delete / Escape',\n    description: \"Reset timer - don't save the solution\"\n  }\n].map(tip => ({ ...tip, icon: 'lightbulb outline' }));\n\nconst TipsAndTricks = () => (\n  <Segment>\n    Shortcuts list:\n    <List celled inverted items={tipsList} />\n  </Segment>\n);\n\nexport default TipsAndTricks;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"trainingMain.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// client/components/trainingMain.js                                                                          //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Segment } from 'semantic-ui-react';\n\nimport Timer from './timer';\n\nconst TrainingMain = ({\n  onChangeAlgorithm,\n  currentAlgorithm: { image, scramble, solution } = {},\n  isVisibleSolution,\n  timerCurrentValue\n}) => (\n  <section className=\"training-main\">\n    {scramble && <Segment className=\"scramble-segment\">{scramble}</Segment>}\n    {image && (\n      <Segment className=\"image-segment\">\n        <img src={`/images/${image}`} />\n      </Segment>\n    )}\n    <Segment className=\"timer-segment\">\n      <Timer\n        isVisibleSolution={isVisibleSolution}\n        solution={solution}\n        timerCurrentValue={timerCurrentValue}\n      />\n    </Segment>\n    {(image || solution) && (\n      <Segment>\n        <Button primary onClick={() => onChangeAlgorithm()}>\n          Randomize new\n        </Button>\n      </Segment>\n    )}\n  </section>\n);\n\nTrainingMain.propTypes = {\n  currentAlgorithm: PropTypes.object,\n  isVisibleSolution: PropTypes.bool.isRequired,\n  onChangeAlgorithm: PropTypes.func.isRequired,\n  timerCurrentValue: PropTypes.number.isRequired\n};\n\nexport default TrainingMain;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"utils.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// client/utils.js                                                                                            //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nexport const getAverage = results => {\n  if (!results || results.length === 0) {\n    return 0;\n  }\n\n  return Math.round(\n    results.reduce((sum, result) => sum + result, 0) / results.length\n  );\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"main.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// client/main.js                                                                                             //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nimport React from 'react';\nimport { Meteor } from 'meteor/meteor';\nimport { render } from 'react-dom';\n\nimport Container from './components/container';\n\nimport 'rc-slider/assets/index.css';\nimport 'react-semantic-toasts/styles/react-semantic-alert.css';\n\nMeteor.startup(() => {\n  render(<Container />, document.getElementById('render-target'));\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"lib\":{\"global-helpers.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// lib/global-helpers.js                                                                                      //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nconst allowedMoves = [\n  'F',\n  \"F'\",\n  'F2',\n  'B',\n  \"B'\",\n  'B2',\n  'R',\n  \"R'\",\n  'R2',\n  'L',\n  \"L'\",\n  'L2',\n  'U',\n  \"U'\",\n  'U2',\n  'D',\n  \"D'\",\n  'D2'\n];\n\nconst getRandomMove = () =>\n  allowedMoves[Math.floor(Math.random() * allowedMoves.length)];\nconst movesConflict = (moveA, moveB) =>\n  moveA &&\n  moveB &&\n  moveA.split('').some(character => moveB.includes(character));\n\nexport const getRandomScramble = movesNr => {\n  const moves = [];\n\n  let move;\n  let previousMove;\n  for (let i = 0; i < movesNr; i++) {\n    move = getRandomMove();\n    while (movesConflict(move, previousMove)) {\n      move = getRandomMove();\n    }\n\n    previousMove = move;\n    moves.push(move);\n  }\n\n  return moves.join(' ');\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"collections\":{\"algorithms.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// collections/algorithms.js                                                                                  //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nimport { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { check } from 'meteor/check';\n\nimport { expect } from 'chai';\n\nexport const Algorithms = new Mongo.Collection('algorithms');\n\nMeteor.methods({\n  'algorithms.toggleActive': (algId, active) => {\n    check(active, Boolean);\n    check(algId, String);\n\n    Algorithms.update(algId, { $set: { active } });\n  },\n  'algorithms.activateAll': category => {\n    Algorithms.update(\n      { category },\n      { $set: { active: true } },\n      { multi: true }\n    );\n  },\n  'algorithms.deactivateAll': category => {\n    Algorithms.update(\n      { category },\n      { $set: { active: false } },\n      { multi: true }\n    );\n  },\n  'algorithms.insert': ({\n    category,\n    image,\n    scramble,\n    solution,\n    subtype,\n    type\n  }) => {\n    expect(category).to.be.a('string');\n    expect(image).to.be.a('string');\n    expect(scramble).to.be.a('string');\n    expect(solution).to.be.a('string');\n    expect(subtype).to.be.a('string');\n    expect(type).to.be.a('string');\n\n    // Make sure the user is logged in before inserting a algorithm\n    /* if (! Meteor.userId()) {\n         throw new Meteor.Error('not-authorized');\n     }*/\n\n    const doc = {\n      createdAt: new Date(),\n      category,\n      image,\n      scramble,\n      solution,\n      subtype,\n      type\n    };\n\n    Algorithms.insert(doc);\n  },\n  'algorithms.search'(text) {\n    check(text, String);\n\n    return Algorithms.find();\n  },\n  'algorithms.remove'(algorithmId) {\n    check(algorithmId, String);\n\n    /*const algorithm = Algorithms.findOne(algorithmId);\n    if (algorithm.private && algorithm.owner !== Meteor.userId()) {\n      // If the algorithm is private, make sure only the owner can delete it\n          throw new Meteor.Error('not-authorized');\n    }*/\n\n    Algorithms.remove(algorithmId);\n  } /*,\n    'algorithms.setChecked'(algorithmId, setChecked) {\n        check(algorithmId, String);\n        check(setChecked, Boolean);\n\n        const algorithm = Algorithms.findOne(algorithmId);\n        if (algorithm.private && algorithm.owner !== Meteor.userId()) {\n              // If the algorithm is private, make sure only the owner can check it off\n                  throw new Meteor.Error('not-authorized');\n            }\n\n        Algorithms.update(algorithmId, { $set: { checked: setChecked } });\n    },\n    'algorithms.setPrivate'(algorithmId, setToPrivate) {\n        check(algorithmId, String);\n        check(setToPrivate, Boolean);\n\n        const algorithm = Algorithms.findOne(algorithmId);\n\n        // Make sure only the algorithm owner can make a algorithm private\n        if (algorithm.owner !== Meteor.userId()) {\n            throw new Meteor.Error('not-authorized');\n        }\n\n        Algorithms.update(algorithmId, { $set: { private: setToPrivate } });\n    },*/\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"results.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// collections/results.js                                                                                     //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nimport { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { check } from 'meteor/check';\n\nexport const Results = new Mongo.Collection('results');\n\nMeteor.methods({\n  'results.insert': ({ algorithmId, category, real, scramble, time }) => {\n    check(category, String);\n    check(real, Boolean);\n    check(time, Number);\n\n    if (category === 'OLL' || category === 'PLL' || category === '3x3x3') {\n      check(scramble, String);\n    }\n\n    if (category === 'OLL' || category === 'PLL') {\n      check(algorithmId, String);\n    }\n\n    // Make sure the user is logged in before inserting a result\n    /* if (! Meteor.userId()) {\n     throw new Meteor.Error('not-authorized');\n     }*/\n\n    const doc = {\n      algorithmId,\n      category,\n      createdAt: new Date(),\n      real,\n      scramble,\n      time\n    };\n\n    Results.insert(doc);\n  },\n  'results.search': text => {\n    check(text, String);\n\n    return Results.find();\n  },\n  'results.remove': resultId => {\n    check(resultId, String);\n\n    /*const result = Results.findOne(resultId);\n     if (result.private && result.owner !== Meteor.userId()) {\n     // If the result is private, make sure only the owner can delete it\n     throw new Meteor.Error('not-authorized');\n     }*/\n\n    Results.remove(resultId);\n  }\n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"generateSVGs.ts\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// generateSVGs.ts                                                                                            //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nlet fs;\nmodule.link(\"fs\", {\n  \"*\"(v) {\n    fs = v;\n  }\n\n}, 0);\nlet OLLs, PLLs;\nmodule.link(\"./server/const\", {\n  OLLs(v) {\n    OLLs = v;\n  },\n\n  PLLs(v) {\n    PLLs = v;\n  }\n\n}, 1);\nconst filesPath = 'public/images/';\n\nconst getSVGcontent = function (_ref, squareLength) {\n  let {\n    squares,\n    strikes,\n    lines = []\n  } = _ref;\n  let spacingLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : squareLength / 10;\n  const cubeSize = squares[0].length;\n  console.log('lines', lines);\n  const colorPrimary = '#ffff45';\n  const colorSecondary = 'gray';\n  const colorBackground = 'black';\n  const squaresFormatted = squares.map((row, rowIndex) => row.map((face, columnIndex) => ({\n    x: spacingLength * 2 + columnIndex * (squareLength + spacingLength),\n    y: spacingLength * 2 + rowIndex * (squareLength + spacingLength),\n    width: squareLength,\n    height: squareLength,\n    fill: face ? colorPrimary : colorSecondary,\n    stroke: colorBackground,\n    strokeWidth: spacingLength\n  })));\n\n  const getStrikePosition = index => {\n    if (index === 0) {\n      return 0.5 * spacingLength;\n    }\n\n    if (index - 1 === cubeSize) {\n      return 1.5 * spacingLength + (index - 1) * (spacingLength + squareLength);\n    }\n\n    return spacingLength * 2 + (index - 1) * (spacingLength + squareLength);\n  };\n\n  const strikesTop = strikes[0] ? strikes[0].map((strike, strikeIndex) => ({\n    x: getStrikePosition(strikeIndex + 1),\n    y: getStrikePosition(0),\n    width: squareLength,\n    height: spacingLength,\n    fill: strike ? colorPrimary : ''\n  })) : [];\n  const strikesRight = strikes[1] ? strikes[1].map((strike, strikeIndex) => ({\n    x: getStrikePosition(cubeSize + 1),\n    y: getStrikePosition(strikeIndex + 1),\n    width: spacingLength,\n    height: squareLength,\n    fill: strike ? colorPrimary : ''\n  })) : [];\n  const strikesBottom = strikes[2] ? strikes[2].map((strike, strikeIndex) => ({\n    x: getStrikePosition(strikeIndex + 1),\n    y: getStrikePosition(cubeSize + 1),\n    width: squareLength,\n    height: spacingLength,\n    fill: strike ? colorPrimary : ''\n  })) : [];\n  const strikesLeft = strikes[3] ? strikes[3].map((strike, strikeIndex) => ({\n    x: getStrikePosition(0),\n    y: getStrikePosition(strikeIndex + 1),\n    width: spacingLength,\n    height: squareLength,\n    fill: strike ? colorPrimary : ''\n  })) : [];\n  const strikesFormatted = [strikesTop, strikesRight, strikesBottom, strikesLeft];\n\n  const getCenter = (_ref2) => {\n    let {\n      x: squareX,\n      y: squareY\n    } = _ref2;\n    const x = 2 * spacingLength + 0.5 * squareLength + (spacingLength + squareLength) * squareX;\n    const y = 2 * spacingLength + 0.5 * squareLength + (spacingLength + squareLength) * squareY;\n    return {\n      x,\n      y\n    };\n  };\n\n  const getPoints = line => line.map(point => getCenter(point));\n\n  const lineToMarker = (pointA, pointB) => {\n    const pointC = {\n      x: pointA.x + Math.abs(pointB.x - pointA.x),\n      y: pointA.y\n    };\n    const rotationAngle = Math.atan2(pointB.y - pointA.y, pointB.x - pointA.x) * 180 / Math.PI - Math.atan2(pointC.y - pointA.y, pointC.x - pointA.x);\n    const leftBackPoint = {\n      x: pointB.x - 0.25 * squareLength,\n      y: pointB.y - 0.25 * squareLength\n    };\n    const rightBackPoint = {\n      x: pointB.x - 0.25 * squareLength,\n      y: pointB.y + 0.25 * squareLength\n    };\n    console.log('pointA', pointA);\n    console.log('pointB', pointB);\n    console.log('leftBackPoint', leftBackPoint);\n    console.log('rightBackPoint', rightBackPoint);\n    return {\n      points: [leftBackPoint, pointB, rightBackPoint],\n      angle: rotationAngle\n    };\n  };\n\n  const getMarkers = line => {\n    const markers = [];\n\n    for (let i = 0; i < line.length; i++) {\n      if (i > 0) {\n        markers.push(lineToMarker(line[i - 1], line[i]));\n      }\n    }\n\n    markers.push(lineToMarker(line[line.length - 1], line[0]));\n    return markers;\n  };\n\n  const linesFormatted = lines.map(line => getPoints(line));\n  const boardSize = spacingLength * 3 + cubeSize * (squareLength + spacingLength);\n  const content = \"\\n    <svg \\n      xmlns=\\\"http://www.w3.org/2000/svg\\\" \\n      width=\\\"\".concat(boardSize, \"\\\"\\n      height=\\\"\").concat(boardSize, \"\\\"\\n    >\\n      <!-- BACKGROUND -->\\n      <rect \\n        width=\\\"\").concat(boardSize, \"\\\"\\n        height=\\\"\").concat(boardSize, \"\\\"\\n        fill=\\\"\").concat(colorBackground, \"\\\"  \\n      />\\n      \\n      <!-- SQUARES -->\\n      \").concat(squaresFormatted.map(row => row.map(square => \"\\n                <rect \\n                  x=\\\"\".concat(square.x, \"\\\" \\n                  y=\\\"\").concat(square.y, \"\\\" \\n                  width=\\\"\").concat(square.width, \"\\\"\\n                  height=\\\"\").concat(square.height, \"\\\"\\n                  fill=\\\"\").concat(square.fill, \"\\\"\\n                />\\n              \")).join('')).join(''), \"\\n      \\n          \\n      <!-- STRIKES -->\\n      \").concat(strikesFormatted.map(strikeGroup => strikeGroup.filter(strike => strike.fill).map(strike => \"\\n                <rect \\n                  x=\\\"\".concat(strike.x, \"\\\" \\n                  y=\\\"\").concat(strike.y, \"\\\" \\n                  width=\\\"\").concat(strike.width, \"\\\"\\n                  height=\\\"\").concat(strike.height, \"\\\"\\n                  fill=\\\"\").concat(strike.fill, \"\\\"\\n                />\\n              \")).join('')).join(''), \"\\n      \\n      <!-- LINES -->\\n      \").concat(linesFormatted.map(line => \"\\n          <polyline \\n          points=\\\"\".concat(line.reduce((points, point) => \"\".concat(points, \" \").concat(point.x, \",\").concat(point.y), '') + \" \".concat(line[0].x, \",\").concat(line[0].y), \"\\\" \\n          fill=\\\"none\\\" \\n          stroke=\\\"orange\\\" \\n          stroke-width=\\\"3\\\"\\n          />\\n        \")), \"\\n      \\n      <!-- MARKERS -->\\n      \").concat(linesFormatted.map(line => getMarkers(line).map((_ref3) => {\n    let {\n      points,\n      angle\n    } = _ref3;\n    return \"\\n                <polygon \\n                  points=\\\"\".concat(points.reduce((points, point) => \"\".concat(points, \" \").concat(point.x, \",\").concat(point.y), ''), \"\\\"\\n                  fill=\\\"red\\\" \\n                  transform=\\\"\\n                  translate(\").concat(points[1].x, \" \").concat(points[1].y, \") \\n                  rotate(\").concat(angle, \" 0 0) \\n                  translate(\").concat(-1 * points[1].x, \" \").concat(-1 * points[1].y, \")\\\"\\n                />\\n              \");\n  }).join('')).join(''), \"\\n    </svg>\\n  \");\n  return content;\n};\n\nconst writeFile = (path, name, extension, content) => {\n  return new Promise(resolve => {\n    fs.writeFile(\"\".concat(path).concat(name).concat(extension), content, err => {\n      if (err) {\n        throw err;\n      }\n\n      resolve(\"File \".concat(name, \" created successfully\"));\n    });\n  });\n};\n/* write files */\n\n\nOLLs.filter(OLL => OLL.squares).forEach(async scramble => {\n  const content = getSVGcontent(scramble, 25, 3);\n  const result = await writeFile(filesPath, scramble.name, '.svg', content);\n  console.info(result);\n});\nPLLs.filter(PLL => PLL.lines && PLL.lines.length).forEach(async scramble => {\n  const content = getSVGcontent(scramble, 25, 3);\n  const result = await writeFile(filesPath, scramble.name, '.svg', content);\n  console.info(result);\n});\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},{\n  \"extensions\": [\n    \".js\",\n    \".json\",\n    \".html\",\n    \".ts\",\n    \".tsx\",\n    \".css\",\n    \".less\"\n  ]\n});\n\nrequire(\"/client/template.main.js\");\nrequire(\"/client/lib/composer.js\");\nrequire(\"/lib/global-helpers.js\");\nrequire(\"/client/components/results/index.js\");\nrequire(\"/client/components/results/results.js\");\nrequire(\"/client/components/training/index.js\");\nrequire(\"/client/components/training/training.js\");\nrequire(\"/client/components/algSettings.js\");\nrequire(\"/client/components/averages.js\");\nrequire(\"/client/components/container.js\");\nrequire(\"/client/components/loader.js\");\nrequire(\"/client/components/menuTop.js\");\nrequire(\"/client/components/timer.js\");\nrequire(\"/client/components/tipsAndTricks.js\");\nrequire(\"/client/components/trainingMain.js\");\nrequire(\"/client/utils.js\");\nrequire(\"/collections/algorithms.js\");\nrequire(\"/collections/results.js\");\nrequire(\"/generateSVGs.ts\");\nrequire(\"/client/main.js\");","hash":"41072bb67b1b53b25a7db553c7b9735de7480902","servePath":"/app.js","sourceMap":{"version":3,"sources":["generateSVGs.ts"],"names":[],"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","file":"/app.js","sourcesContent":["import * as fs from 'fs';\nimport { algorithm, line, OLLs, PLLs, point } from './server/const';\n\ntype strikeFormatted = {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  fill: string;\n};\n\ntype squareFormatted = strikeFormatted & {\n  stroke: string;\n  strokeWidth: number;\n};\n\ntype marker = {\n  points: point[];\n  angle: number;\n};\n\nconst filesPath: string = 'public/images/';\n\nconst getSVGcontent = (\n  { squares, strikes, lines = [] }: algorithm,\n  squareLength: number,\n  spacingLength: number = squareLength / 10\n): string => {\n  const cubeSize = squares[0].length;\n\n  console.log('lines', lines);\n\n  const colorPrimary = '#ffff45';\n  const colorSecondary = 'gray';\n  const colorBackground = 'black';\n\n  const squaresFormatted: squareFormatted[][] = squares.map(\n    (row: number[], rowIndex: number) =>\n      row.map((face, columnIndex) => ({\n        x: spacingLength * 2 + columnIndex * (squareLength + spacingLength),\n        y: spacingLength * 2 + rowIndex * (squareLength + spacingLength),\n        width: squareLength,\n        height: squareLength,\n        fill: face ? colorPrimary : colorSecondary,\n        stroke: colorBackground,\n        strokeWidth: spacingLength\n      }))\n  );\n\n  const getStrikePosition = (index: number): number => {\n    if (index === 0) {\n      return 0.5 * spacingLength;\n    }\n\n    if (index - 1 === cubeSize) {\n      return 1.5 * spacingLength + (index - 1) * (spacingLength + squareLength);\n    }\n\n    return spacingLength * 2 + (index - 1) * (spacingLength + squareLength);\n  };\n\n  const strikesTop: strikeFormatted[] = strikes[0]\n    ? strikes[0].map((strike: number, strikeIndex: number) => ({\n        x: getStrikePosition(strikeIndex + 1),\n        y: getStrikePosition(0),\n        width: squareLength,\n        height: spacingLength,\n        fill: strike ? colorPrimary : ''\n      }))\n    : [];\n\n  const strikesRight: strikeFormatted[] = strikes[1]\n    ? strikes[1].map((strike: number, strikeIndex: number) => ({\n        x: getStrikePosition(cubeSize + 1),\n        y: getStrikePosition(strikeIndex + 1),\n        width: spacingLength,\n        height: squareLength,\n        fill: strike ? colorPrimary : ''\n      }))\n    : [];\n\n  const strikesBottom: strikeFormatted[] = strikes[2]\n    ? strikes[2].map((strike: number, strikeIndex: number) => ({\n        x: getStrikePosition(strikeIndex + 1),\n        y: getStrikePosition(cubeSize + 1),\n        width: squareLength,\n        height: spacingLength,\n        fill: strike ? colorPrimary : ''\n      }))\n    : [];\n\n  const strikesLeft: strikeFormatted[] = strikes[3]\n    ? strikes[3].map((strike: number, strikeIndex: number) => ({\n        x: getStrikePosition(0),\n        y: getStrikePosition(strikeIndex + 1),\n        width: spacingLength,\n        height: squareLength,\n        fill: strike ? colorPrimary : ''\n      }))\n    : [];\n\n  const strikesFormatted: strikeFormatted[][] = [\n    strikesTop,\n    strikesRight,\n    strikesBottom,\n    strikesLeft\n  ];\n\n  const getCenter = ({ x: squareX, y: squareY }: point) => {\n    const x =\n      2 * spacingLength +\n      0.5 * squareLength +\n      (spacingLength + squareLength) * squareX;\n    const y =\n      2 * spacingLength +\n      0.5 * squareLength +\n      (spacingLength + squareLength) * squareY;\n\n    return { x, y };\n  };\n\n  const getPoints = (line: line): line => line.map(point => getCenter(point));\n\n  const lineToMarker = (pointA: point, pointB: point) => {\n    const pointC = {\n      x: pointA.x + Math.abs(pointB.x - pointA.x),\n      y: pointA.y\n    };\n\n    const rotationAngle =\n      (Math.atan2(pointB.y - pointA.y, pointB.x - pointA.x) * 180) / Math.PI -\n      Math.atan2(pointC.y - pointA.y, pointC.x - pointA.x);\n\n    const leftBackPoint = {\n      x: pointB.x - 0.25 * squareLength,\n      y: pointB.y - 0.25 * squareLength\n    };\n\n    const rightBackPoint = {\n      x: pointB.x - 0.25 * squareLength,\n      y: pointB.y + 0.25 * squareLength\n    };\n\n    console.log('pointA', pointA);\n    console.log('pointB', pointB);\n    console.log('leftBackPoint', leftBackPoint);\n    console.log('rightBackPoint', rightBackPoint);\n\n    return {\n      points: [leftBackPoint, pointB, rightBackPoint],\n      angle: rotationAngle\n    };\n  };\n\n  const getMarkers = (line: line): marker[] => {\n    const markers = [];\n\n    for (let i = 0; i < line.length; i++) {\n      if (i > 0) {\n        markers.push(lineToMarker(line[i - 1], line[i]));\n      }\n    }\n\n    markers.push(lineToMarker(line[line.length - 1], line[0]));\n\n    return markers;\n  };\n\n  const linesFormatted: line[] = lines.map(line => getPoints(line));\n\n  const boardSize: number =\n    spacingLength * 3 + cubeSize * (squareLength + spacingLength);\n\n  const content: string = `\n    <svg \n      xmlns=\"http://www.w3.org/2000/svg\" \n      width=\"${boardSize}\"\n      height=\"${boardSize}\"\n    >\n      <!-- BACKGROUND -->\n      <rect \n        width=\"${boardSize}\"\n        height=\"${boardSize}\"\n        fill=\"${colorBackground}\"  \n      />\n      \n      <!-- SQUARES -->\n      ${squaresFormatted\n        .map(row =>\n          row\n            .map(\n              square => `\n                <rect \n                  x=\"${square.x}\" \n                  y=\"${square.y}\" \n                  width=\"${square.width}\"\n                  height=\"${square.height}\"\n                  fill=\"${square.fill}\"\n                />\n              `\n            )\n            .join('')\n        )\n        .join('')}\n      \n          \n      <!-- STRIKES -->\n      ${strikesFormatted\n        .map(strikeGroup =>\n          strikeGroup\n            .filter(strike => strike.fill)\n            .map(\n              strike => `\n                <rect \n                  x=\"${strike.x}\" \n                  y=\"${strike.y}\" \n                  width=\"${strike.width}\"\n                  height=\"${strike.height}\"\n                  fill=\"${strike.fill}\"\n                />\n              `\n            )\n            .join('')\n        )\n        .join('')}\n      \n      <!-- LINES -->\n      ${linesFormatted.map(\n        line => `\n          <polyline \n          points=\"${line.reduce(\n            (points, point) => `${points} ${point.x},${point.y}`,\n            ''\n          ) + ` ${line[0].x},${line[0].y}`}\" \n          fill=\"none\" \n          stroke=\"orange\" \n          stroke-width=\"3\"\n          />\n        `\n      )}\n      \n      <!-- MARKERS -->\n      ${linesFormatted\n        .map((line: line) =>\n          getMarkers(line)\n            .map(\n              ({ points, angle }: { points: point[]; angle: number }) => `\n                <polygon \n                  points=\"${points.reduce(\n                    (points: string, point: point) =>\n                      `${points} ${point.x},${point.y}`,\n                    ''\n                  )}\"\n                  fill=\"red\" \n                  transform=\"\n                  translate(${points[1].x} ${points[1].y}) \n                  rotate(${angle} 0 0) \n                  translate(${-1 * points[1].x} ${-1 * points[1].y})\"\n                />\n              `\n            )\n            .join('')\n        )\n        .join('')}\n    </svg>\n  `;\n\n  return content;\n};\n\nconst writeFile = (\n  path: string,\n  name: string,\n  extension: string,\n  content: string\n) => {\n  return new Promise(resolve => {\n    fs.writeFile(`${path}${name}${extension}`, content, err => {\n      if (err) {\n        throw err;\n      }\n\n      resolve(`File ${name} created successfully`);\n    });\n  });\n};\n\n/* write files */\nOLLs.filter((OLL: algorithm) => OLL.squares).forEach(\n  async (scramble: algorithm) => {\n    const content = getSVGcontent(scramble, 25, 3);\n    const result = await writeFile(filesPath, scramble.name, '.svg', content);\n    console.info(result);\n  }\n);\n\nPLLs.filter((PLL: algorithm) => PLL.lines && PLL.lines.length).forEach(\n  async (scramble: algorithm) => {\n    const content = getSVGcontent(scramble, 25, 3);\n    const result = await writeFile(filesPath, scramble.name, '.svg', content);\n    console.info(result);\n  }\n);\n"]}}]